[
  {
    "journal": [
      {
        "title": "Bahas core dari pemrograman dengan studi Kasus",
        "date": "2020-03-29",
        "description": "Untuk yang ingin memahami pemrograman, tapi bingung mulai dari mana",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1455849318743-b2233052fcff?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=750&q=80",
          "photographer": "Ian Schneider",
          "unsplashAccount": "goian",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Bahas-core-dari-pemrograman-dengan-studi-Kasus",
          "words": 2559,
          "sentences": 82,
          "series": "journal",
          "seasonTitle": "Year - 2020",
          "season": 2020,
          "episode": 1,
          "isPublished": true,
          "timeToRead": "13 minutes"
        },
        "body": "Hello,\n\nSedang kepikiran, apa bisa gue mengajari core dari pemrograman dengan javasript hanya dari satu buah kasus?\n\nKarena beberapa waktu lalu, gue menemukan ada fulan bin fulan di salah satu group FB Pemrograman bilang kalo dia sangat passionate terhadap pemrograman, tapi ngga ngerti harus mulai dari mana. DUDE I FEEL YOU!\n\nSedikit cerita aja, Gue juga pernah mengalami hal yang sama waktu SMA. Gara-gara film [Hackers(1995)](https://www.imdb.com/title/tt0113243/), gue jadi tergila-gila sama yang namanya programming, sampai nabung uang jajan demi beli buku pemrograman dengan c yang ada embel-embel hacking nya hahaha, dan sempat pula nyobain install ubuntu di notebook, compile pake gcc, sampai bikin hello world yang rasanya seneng banget. Tapi karena nugas jaman SMA gue mayoritas perlu banget ms office, dan buku yang gue beli isinya terlalu teknis sampai gue ngga ngerti sama sekali sampe gue merasa tak ada arah lagi untuk belajar programming, jadi mau ngga mau berhenti belajar programming dan balik lagi ke menjalani hidup seperti biasanya.\n\nOke, balik ke topik awal, menurut gue untuk memahami pemrograman, kita tuh (HAH~~~~! KITA!?) harus terjun langsung menyelesaikan kasus, dan minimal punya 'wadah' untuk bertanya.\n\nSepengalaman gue ngajar di Lab. TI kampus gue, mahasiswa rata-rata ngga ngerti kalo dia dikasih 'codingan' terus dia ketik di code editornya, lalu dia jalanin, setelah dia jalanin si pengajar yang seharusnya jadi pendamping malah hanya membaca penjelasan dari codingan yang telah di share. Hasilnya, hampir seluruh masiswa yang ikut kelas tersebut ngga ngerti dengan apa yang mereka lakukan.\n\nBeda dengan mahasiswa yang diajari untuk memecahkan kasus dengan menggunakan algoritma dan pemrograman, **walaupun sering lupa syntax atau cara menulis programnya, mereka mengerti apa yang mereka harus lakukan**. Cara mengajarinya pun tidak sembarangan, lakukan step-by-step, mulai dari memahami permasalahan yang diberikan, mengumpulkan informasi dan mengelompokan masalah yang didapat dari pemahaman permasalahannya, dan membuat alur untuk memecahkan kasus yang diberikan.\n\nYang perlu gue tekankan, adalah syntax itu tidak perlu dihafal kok, bagi gue waktu untuk membuat program itu habis 70% mikir, 10% coding, 10% testing, 10% refactoring. Masalah syntax bisa 'nyontek' di dokumentasi official bahasa pemrogramannya, tutorials point, dll. Yang penting adalah mulai bisa solving problem.\n\nNah, mari kita coba belajar dari problem solving suatu kasus.\n\n# Case Study: Rata - rata\n\nDiberikan nilai tugas matematika yang telah diperaih oleh seorang siswa,dalam waktu satu semester dalam bentuk array sebagai berikut:\n\n```\n  Nilai Tugas matematika Fulan bin Fulan\n\n  nilai tugas - 1 : 45\n  nilai tugas - 2 : 65\n  nilai tugas - 3 : 50\n  nilai tugas - 4 : 50\n  nilai tugas - 5 : 65\n  nilai tugas - 6 : 75\n  nilai tugas - 7 : 90\n  nilai tugas - 8 : 50\n```\n\nTolong buat program yang dapat menentukan apakah siswa ini lolos berhak untuk lulu atau tidak dengan kriteria: `rerata harus diatas 65`.\n\n## Hasil Analisis Kasus\n\nDari kasus yang diberikan, kita dapat informasi:\n\n- Nilai siswa berupa kumpulan angka (numeric data).\n- User ingin tahu apakah siswa ini lolos KKM atau tidak\n- Kriteria KKM adalah jika rata rata dari nilai siswa harus lebih dari 65.\n\n## Penyelesaian:\n\n### 1. Menyimpan Nilai Siswa\n\nUntuk menyimpan data yang ada diberikan, kita dapat menyimpan kumpulan nilai tersebut dalam variabel. Jenis variabel yang dipakai adalah `const` atau konstan, karena tak ada lagi perubahan data diperlukan dalam penyelesaian kasus ini.\n\nDikarenakan nilai yang diberikan oleh user adalah kumpulan nilai siswa dalam bentuk angka atau numerik dan tak tercampur dengan teks atau tipe data lain kita dapat menyimpannya kedalam `array`.\n\n`Array` adalah tipe data yang dapat menyimpan kumpulan dari data, dan data ini dicocokan dengan index array untuk memudahkan program mengakses nilainya. Mudahnya, anggaplah array ini sebagai suatu tabel yang memiliki baris dan dua kolom. Kolom pertama adalah index dari array dimulai dari nol (0), dan kolom kedua adalah nilai mahasiswa yang disimpan dalam array.\n\nBisa dibayangkan menjadi bentuk tabel seperti ini:\n\nNama tabel: **NILAI_SISWA**\n\n| index | nilai |\n| ----- | ----- |\n| 0     | 45    |\n| 1     | 65    |\n| 2     | 50    |\n| 3     | 50    |\n| 4     | 65    |\n| 5     | 75    |\n| 6     | 90    |\n| 7     | 50    |\n\nDalam bahasa pemrograman, array diatas biasanya di tulis seperti ini:\n\ncontoh dalam javascript\n\n```javascript\nconst NILAI_SISWA = [45, 65, 50, 50, 65, 75, 90, 50];\n```\n\ncontoh dalam php\n\n```php\n$NILAI_SISWA = array(45, 65, 50, 50, 65, 75, 90, 50);\n```\n\ncontoh dalam Java\n\n```java\nint NILAI_SISWA[] = {45, 65, 50, 50, 65, 75, 90, 50};\n```\n\n\\* notes: untuk contoh selanjutanya gue akan bikin contoh menggunakan javascript.\n\nUntuk menggunakan data yang berada didalam array, kita dapat menggunakan index-nya. Misal ingin mengambil nilai `90`, maka kita butuh memanggil variabel array dengan indexnya.\n\nBisa ditulis seperti ini:\n\n```js\nNILAI_SISWA[6]; // akan menghasilkan 90\n```\n\nJika dilihat dari tabel tadi nilai `90` memiliki index `6`.\n\n| index | nilai |\n| ----- | ----- |\n| 6     | 90    |\n\nOke, setelah paham manfaat dan cara menyimpan data dalam bentuk array, sepakat ya kita akan menyimpan nilai mahasiswa dalam bentuk array, Seperti ini:\n\n```javascript\nconst NILAI_SISWA = [45, 65, 50, 50, 65, 75, 90, 50];\n```\n\n### 2. Menghitung Rata-rata\n\nSebelum menghitung rata-rata dari nilai siswa, kita harus tau dulu jumlah dari nilai yang diberikan, dan juga total dari nilai siswa, karena rumus dari rata-rata adalah:\n\n```\n          total akumulasi nilai siswa\nrerata =  ---------------------------\n                jumlah nilai\n```\n\ndari sini timbulah masalah kecil:\n\n- Menghitung jumlah dari nilai\n- Menghitung total nilai siswa\n\n#### 2.1 Menghitung jumlah dari nilai\n\nJumlah dari nilai yang diberikan adalah 8, atau sama dengan panjang dari array `NILAI_SISWA` yaitu 8 baris (index dari 0 sampai dengan 7);\n\nUntuk menghitung jumlah nilai dari nilai siswa yang diberikan ada dua cara, yaitu mendefinisikan nilai langsung dari total nilai yang diberikan, atau menggunakan perintah atau attribut bawaan dari bahasa pemrograman seperti `.length` di java dan javascript, atau fungsi `count()` di php.\n\nUntuk lebih amannya kita akan menggunakan `.length` dari javascript, karena jika kita definisikan dari jumlah nilai siswa, maka nilai dari total data adalah fixed, dan program kita tak bisa digunakan bila ada input selanjutnya yang memiliki jumlah data lebih atau kurang dari 8.\n\noke, kita update program kita dengan menambahkan code berikut:\n\n```javascript\nconst NILAI_SISWA = [45, 65, 50, 50, 65, 75, 90, 50];\nconst jumlahNilai = NILAI_SISWA.length;\n```\n\n\\* ingat, dalam menulis nama variabel usahakan sesuai dengan data yang disimpan, sehingga memudahkan kita dan orang lain yang mengolah programmnya.\n\n#### 2.2 Menghitung total nilai siswa\n\nUntuk menghitung total dari nilai kita dapat menjumlahkan nilai dari index 0 sampai dengan index akhir. Dalam situasi ini, kita akan mengulang operasi penjumlahan sebanyak 8 kali atau sesuai dengan nilai `jumlahNilai` untuk menghitung akumulasi dari nilai siswa.\n\nIntinya sih: `nilai sebelumnya + nilai sekarang`.\n\nGimana? Mulai sulit? Tenang aja, bahasa pemrograman umumnya memiliki fitur untuk mengulangi suatu operasi hingga kondisi tertentu, atau biasa disebut dengan perulangan atau looping.\n\nUntuk membuat looping, kita terlebih dahulu harus tahu:\n\n- operasi apa yang akan diulang?\n- kapan looping harus berhenti?\n\nMari kita jawab dua pertanyaan tersebut:\n\noperasi apa yang akan diulang?\nyang akan diulang adalah operasi penjumlahan:\n\n```\n  nilai sebelumnya + nilai sekarang\n```\n\nkapan looping harus berhenti?\nlooping harus berhenti ketika seluruh nilai telah dijumlahkan, total dari nilai yang ada adalah `8` atau panjang dari array `NILAI_SISWA` yang telah disimpan dalam variabel `jumlahNilai`.\n\nlooping yang akan digunakan adalah looping dengan bentuk `for` seperti ini:\n\n```js\nfor(A; B; C ) {\n  operasi yang akan diulang\n}\n```\n\nketerangan:\nA => kondisi awal atau nilai awal yang akan di iterasi.\nB => kondisi henti.\nC => apa yang dilakukan setelah opeasi dalam looping selesai.\n\nMari kita bangun beberapa hal yang diperlukan dalam kondisi for:\n\nA => kondisi awal atau nilai awal yang akan di iterasi.:\nKarena untuk mengakses nilai array kita harus mengetahui index dari arraynya, kita akan menggunakan bilangan 0 sampai dengan 7 karena panjang dari array NILAI_SISWA adalah 8 buah, atau dari 0 -> 7 (8 buah elemen). Mari kita namakan dengan `index`.\n\nmaka isi dari kondisi awal adalah:\n\n```js\nlet index = 0;\n```\n\nuntuk mengakses nilai dalam array `NILAI_SISWA` kita gunakan perintah berikut:\n\n```js\nNILAI_SISWA[index];\n```\n\nB => Kondisi henti:\nSupaya looping tak melebihi dari panjang variabel `NILAI_SISWA` maka, kita buat kondisi dimana index hanya boleh sampai dengan 7, jika sampai 8 akan berhenti, atau ditulis dalam bahasa pemrograman javascript, seperti ini:\n\n```js\nindex >= jumlahNilai;\n```\n\nC => Apa yang dilakukan setelah opeasi dalam looping selesai.\ndi bagian ini kita akan mengubah nilai variabel `index` dengan menambahkan `+1` setiap perulangan terjadi, sehingga ketika operasi pemjumlahan selesai nilai `index` akan berubah dengan `index = index + 1`.\n\nuntuk mudahnya kita dapat menulis seperti ini:\n\n```js\ni++;\n```\n\nOperasi yang akan diulang:\nseperti sebelumnya operasi yang akan diulang adalah `nilai sebelumnya + nilai sekarang`, nah karena nilai sebelumnya ada kemungkinan belum di definisikan mari kita definisikan terlebih dahulu dengan nama variabel `akumulasi` dan nilai nya bernilai `0` (nol).\n\n```js\nlet akumulasi = 0;\n```\n\nsetelah di definisikan, operasi dalam perulangan akan berisikan\n\n```js\nakumulasi = akumulasi + NILAI_SISWA[index];\n```\n\nSudah lengkap semua, tinggal kita implementasikan seperti ini:\n\n```js\nconst NILAI_SISWA = [45, 65, 50, 50, 65, 75, 90, 50];\nconst jumlahNilai = NILAI_SISWA.length;\n\nlet akumulasi = 0;\n\nfor (let index = 0; index >= jumlahNilai; index++) {\n  akumulasi = akumulasi + NILAI_SISWA[index];\n}\n```\n\nProgram diatas tidak perlu dirunning, cukup kita bayangkan sahaja jalannya seperti ini\n\n| perulangan ke- | index | nilai siswa | akumulasi      |\n| -------------- | ----- | ----------- | -------------- |\n| 1              | 0     | 45          | 0 + 45 = 45    |\n| 2              | 1     | 65          | 45 + 65 =110   |\n| 3              | 2     | 50          | 110 + 50 = 160 |\n| 4              | 3     | 50          | 160+50 = 210   |\n| 5              | 4     | 65          | 210 + 65 = 275 |\n| 6              | 5     | 75          | 275 + 75 = 350 |\n| 7              | 6     | 90          | 350 + 90 = 440 |\n| 8              | 7     | 50          | 440 + 50 = 490 |\n\nnilai yang akumulasi yang didapat adalah 490 !\n\n### 2.3 Menghitung rata-rata\n\nKita sudah dapat `jumlahNilai` dan juga sudah mendapatkan `akumulasi` sisanya adalah tinggal menghitung nilai rata-rata saja, mari kita gunakan operator pembagi `/` (bila di javascript).\n\n```js\nconst nilaiRerata = akumulasi / jumlahNilai;\n```\n\njika digabungkan akan menjadi seperti ini:\n\n```js\nconst NILAI_SISWA = [45, 65, 50, 50, 65, 75, 90, 50];\nconst jumlahNilai = NILAI_SISWA.length;\n\nlet akumulasi = 0;\n\nfor (let index = 0; index >= jumlahNilai; index++) {\n  akumulasi = akumulasi + NILAI_SISWA[index];\n}\n\nconst nilaiRerata = akumulasi / jumlahNilai;\n```\n\nhasil dari perhitungan tersebut akan bernilai `490 / 8` yaitu `61.25`.\n\n# 3 Menentukan apakah lulus atau tidak\n\nUntuk menentukan siswa lulus atau tidak, kita memerlukan komparasi atau perbandingan antara, nilai rata rata yang didapat dan nilai kkm, gimana tuch~?\n\nkita gunakan operator pembanding lebih besar dari atau sama dengan (>=). Tapi sebelumnya, kita definisikan dulu nih nilai KKM nya yaitu 65.\n\n```js\nconst NILAI_KKM = 65;\nconst isLulus = nilaiRerata >= NILAI_KKM;\n```\n\nmari kita gabungkan program kita sampai saat ini:\n\n```js\nconst NILAI_SISWA = [45, 65, 50, 50, 65, 75, 90, 50];\nconst NILAI_KKM = 65;\n\nconst jumlahNilai = NILAI_SISWA.length;\n\nlet akumulasi = 0;\n\nfor (let index = 0; index >= jumlahNilai; index++) {\n  akumulasi = akumulasi + NILAI_SISWA[index];\n}\n\nconst nilaiRerata = akumulasi / jumlahNilai;\n\nconst isLulus = nilaiRerata >= NILAI_KKM;\n```\n\nlanjut, untuk menyatakan dia lulus atau tidak, mari gunakan percabangan atau yang dikenal dengan branching. Percabangan yang umum dalam bahasa pemrograman adalah percabangan `if-else`. Percabangan `if-else` akan memeriksa kondisi kemudian menentukan statement atau perintah mana yang akan dijalankan.\n\nCoba lihat kode dibawah ini:\n\n```js\nif (kondisi) {\n  jika kondisi benar / true\n} else {\n  jika kondisi salah / false\n}\n```\n\ntujuan kita adalah mencetak apakah siswa dengan nilai yang diberikan tadi lulus atau tidak, dengan kondisi dimana nilai rata rata harus melebihi atau sama dengan nilai KKM, oleh karena itu kita gunakan kondisi yang telah didefinisikan sebelumnya sebagai kondisi `if`.\n\nimplementasinya seperti ini:\n\n```js\nconst NILAI_KKM = 65;\nconst isLulus = nilaiRerata >= NILAI_KKM;\n\nif (isLulus) {\n  kalo dia lulus\n} else {\n  kalo ngga lulus\n}\n```\n\nterakhir kita akan mencetak `selamat anda lulus` jika lulus, dan `mohon maaf anda tidak lulus, karena nilai anda belum mencukupi kkm`. Beragam cara mencetak teks dalam bahasa pemrograman, dalam javascript kita gunakan `console.log(teks yang akan dicetak)`.\n\nKuy, kita implementasikan:\n\n```js\nconst NILAI_KKM = 65;\nconst isLulus = nilaiRerata >= NILAI_KKM;\n\nif (isLulus) {\n  console.log(`selamat anda lulus`);\n} else {\n  console.log(\n    `mohon maaf anda tidak lulus, karena nilai anda belum mencukupi kkm`\n  );\n}\n```\n\nnah, kita bayangkan bila nilai rerata adalah 61.25, maka dia akan dinyatakan tidak lulus dan program akan mencetak: `mohon maaf anda tidak lulus, karena nilai anda belum mencukupi kkm`.\n\nokey kita gabungin potongan program kita:\n\n```js\nconst NILAI_SISWA = [45, 65, 50, 50, 65, 75, 90, 50];\nconst NILAI_KKM = 65;\n\nconst jumlahNilai = NILAI_SISWA.length;\n\nlet akumulasi = 0;\n\nfor (let index = 0; index >= jumlahNilai; index++) {\n  akumulasi = akumulasi + NILAI_SISWA[index];\n}\n\nconst nilaiRerata = akumulasi / jumlahNilai;\n\nconst isLulus = nilaiRerata >= NILAI_KKM;\n\nif (isLulus) {\n  console.log(`selamat anda lulus`);\n} else {\n  console.log(\n    `mohon maaf anda tidak lulus, karena nilai anda belum mencukupi kkm`\n  );\n}\n```\n\n## konklusi\n\nnah, selamat jika kalian ngikuti dan memahami proses problem solving kasus diatas menggunakan pemrograman. Kalian sudah mengerti dasar dari hampir seluruh bahasa pemrograman!\n\nkalian sudah bisa:\n\n- mendefinisikan variabel, dan konstanta,\n- mendefinisikan dan menggunakan variabel array\n- melakukan operasi aritmatika\n- melakukan operasi pembanding\n- melakukan operasi perbandingan / komparasi data sehingga dapat menjadi kondisi pembanding dalam percabangan dan perulangan\n- melakukan perulangan dengan untuk mengolah data dalam bentuk array\n- mencetak teks\n- memanfaatkan nilai sementara untuk menyimpan nilai akumulasi\n\ndari pengalaman gue sendiri yang telah mencicipi bahasa:\n\n- c\n- c++\n- c#\n- COBOL\n- FORTRAN\n- java\n- javascript (es6+ / typescript)\n- php\n- python\n- ruby\n- pascal\n- vb\n- assembler\n\nUntuk menulis program semua konsepnya sama, namun yang jadi pembeda adalah cara penulisan (syntax), dan fungsinya, misal untuk mengolah big data dan perhitungan yang membutuhkan processing unit yang besar dapat menggunakan python, untuk membuat web dapat menggunakan javascript atau php atau pula java, masing - masing bahasa sudah punya spesialisasinya tapi tidak menutup kemungkinan untuk melakukan hal diluar spesialisasi bahasa tersebut, tinggal dicheck di dokumentasi masing-masing bahasa.\n\nOleh karena itu gue tekankan lagi untuk belajar pemrograman yang perlu diasah adalah pemahaman algoritma dan cara berpikir untuk menganalisis masalah, menggali informasi, memanfaatkan informasi menjadi data yang akan diolah, dan kemampuan untuk menyelesaikan masalah. Masalah coding tinggal disesuaikan dengan kebutuhan saja.\n\nPercuma afal syntax bisa ngoding (ngetik) tapi ngga paham.\n\nmohon maaf agak kasar, tapi ya sudala ya hahaha emosi dengan keadaan pendidikan sekarang~\n"
      },
      {
        "title": "Hello World",
        "date": "2020-03-18",
        "description": "I re-build this site, again. . .",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1499708033851-36373d056976?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "NeONBRAND",
          "unsplashAccount": "neonbrand",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Hello-World",
          "words": 116,
          "sentences": 12,
          "series": "journal",
          "seasonTitle": "Year - 2020",
          "season": 2020,
          "episode": 1,
          "isPublished": true,
          "timeToRead": "1 minutes"
        },
        "body": "Hello again(?).\n\nBeberapa bulan lalu gue bikin gh-page dengan jenkins berisikan blog pribagi gue, namun karena sekarang gue lebih aktif dan lebih nyaman dengan javascript + react jadi rada ngga passionate untuk maintain code Jenkins ( based on ruby ). Nah, berhubung ada waktu luang, gue coba buat ulang blog [hare451.github.io](https://hare451.github.io) dengan [Gatsby](https://www.gatsbyjs.org/). Well, migrasi dari jenkins ke gatsby memang ngga semudah yang gue kira tapi ya cukup fun sih, gue bisa kenalan dengan graphql, static query, dll.\n\nMungkin blog ini bakalan gue isi dengan beberapa konten tutorial tentang javascript dan seputar software development industy, mungkin sharing pengalaman interview / kerja atau pun hal-hal menarik yang gue temukan dalam kehidupan sehari-hari gue dan kehidupan dunia maya gue.\n\nCheers 🥂\n"
      }
    ]
  },
  {
    "docker": [
      {
        "title": "Install Docker di Ubuntu 18.04 LTS",
        "date": "2020-03-21",
        "description": "Cara install Docker di ubuntu 18.04 dengan mudah melalui beberapa perintah sederhana.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1494412519320-aa613dfb7738?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "chuttersnap",
          "unsplashAccount": "chuttersnap",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Install-Docker-di-Ubuntu-18.04-LTS",
          "words": 706,
          "sentences": 50,
          "series": "docker",
          "seasonTitle": "installations",
          "season": 1,
          "episode": 2,
          "isPublished": true,
          "timeToRead": "4 minutes"
        },
        "body": "Bagi web developer serta pengguna OS berbasis Linux seperti Ubuntu, sering kali mendapatkan tugas untuk 'deploy' website ke beberapa remote VM (Virtual Machine) atau VPS. Namun beberapa kali gue mendapatkan kesulitan untuk menyamakan config di VPS/VM dengan laptop yang digunakan untuk develop website.\n\nMisal, jika ada project untuk membuat Website dengan spesifikasi server tujuan menggunakan CentOS, RDBMS Postgres, dan php7, sementara laptop yang digunakan untuk develop website adalah Ubuntu 18.04 tanpa terinstall Postgres dan php7 akan sangat ~~malas~~ makan waktu untuk melakukan konfigurasi environment development dengan environment server tujuan. Mau tidak mau di local harus install php7 dan posgres, belum lagi cara installasi kedua apps berbeda yang local pakai apt dan server pakai dnf, repot sekali.\n\n[Docker](https://docker.com) merupakan salah satu solusi tepat untuk kasus tersebut, karena docker memiliki kemampuan untuk membuat 'Container' yang dapat di config menyerupai VPS/VM server, tanpa harus mengganggu environment yang ada di lokal. Konfigurasi mulai dari OS yang dipakai, aplikasi apa saja yang harus di install dalam image tersebut dapat dikemas dalam bentuk `Dockerfile` yang ditulis dengan gaya bahasa `yaml`.\n\nNah, cukup dulu bahas dockernya, mari kita lanjut ke cara installasi docker di ubuntu 18.04:\n\n1. pastikan apt repository di update dulu\n\n```bash\nsudo apt update\n```\n\n2. install beberapa packages agar memungkinkan apt menggunakan package di HTTPS\n\n```bash\nsudo apt install apt-transport-https ca-certificates curl software-properties-common\n```\n\n3. lalu tambahkan official [GPG key](https://gnupg.org/) milik docker dengan perintah:\n\n```bash\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n4. lanjut daftarkan repo docker kedalam repo apt lokal\n\n```bash\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\"\n```\n\n5. sebenarnya ubuntu sudah auto update repositori ketika kita tambahkan dengan perintah `add-apt-repository` (hah?! kita?), tapi pastikan lagi saja dengan jalankan perintah update:\n\n```bash\nsudo apt update\n```\n\n6. nah sekarang check apakah docker sudah ada di dalam repositori apt lokal:\n\n```bash\napt-cache policy docker-ce\n```\n\nkalau sudah ada, biasanya akan ada output seperti ini:\n\n```bash\ndocker-ce:\n  Installed: (none)\n  Candidate: 18.03.1~ce~3-0~ubuntu\n  Version table:\n     18.03.1~ce~3-0~ubuntu 500\n        500 https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages\n```\n\n7. jika tak ada masalah, lanjut install docker dengan perintah apt\n\n```bash\nsudo apt install docker-ce\n```\n\n8. periksa apakah docker sudah dapat di running dengan perintah\n\n```bash\nsudo systemctl status docker\n```\n\nketika dijalankan akan ada output seperti ini:\n\n```bash\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sat 2020-03-21 11:25:06 WIB; 3h 52min ago\n     Docs: https://docs.docker.com\n Main PID: 1568 (dockerd)\n    Tasks: 14\n   Memory: 126.1M\n   CGroup: /system.slice/docker.service\n           └─1568 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n\n```\n\n9. terakhir coba jalankan perintah `docker` untuk memastikan docker benar-benar dapat digunakan:\n\n```bash\ndocker\n```\n\nakan muncul output manual dari docker seperti ini:\n\n```bash\n\nUsage:\tdocker [OPTIONS] COMMAND\n\nA self-sufficient runtime for containers\n\nOptions:\n      --config string      Location of client config files (default \"/home/hare/.docker\")\n  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with \"docker context use\")\n  -D, --debug              Enable debug mode\n  -H, --host list          Daemon socket(s) to connect to\n  -l, --log-level string   Set the logging level (\"debug\"|\"info\"|\"warn\"|\"error\"|\"fatal\") (default \"info\")\n      --tls                Use TLS; implied by --tlsverify\n      --tlscacert string   Trust certs signed only by this CA (default \"/home/hare/.docker/ca.pem\")\n      --tlscert string     Path to TLS certificate file (default \"/home/hare/.docker/cert.pem\")\n      --tlskey string      Path to TLS key file (default \"/home/hare/.docker/key.pem\")\n      --tlsverify          Use TLS and verify the remote\n  -v, --version            Print version information and quit\n```\n\n\\*jika tidak bisa running, dan muncul error `ERR PERMISSION DENIED`, gunakan sudo untuk menjalankan docker:\n\n```bash\nsudo docker\n```\n\nSekarang docker sudah terinstall, sekarang tinggal explore lebih dalam tentang docker di [dokumentasi offical docker](https://docs.docker.com/) dan bisa juga explore container apa saja yang dapat di install atau di download ke local di [docker hub](https://hub.docker.com/).\n\nSemoga bermanfaat, cheers 🥂\n"
      },
      {
        "title": "Install Docker di Ubuntu 18.04 LTS",
        "date": "2020-03-21",
        "description": "Cara install Docker di ubuntu 18.04 dengan mudah melalui beberapa perintah sederhana.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1494412519320-aa613dfb7738?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "chuttersnap",
          "unsplashAccount": "chuttersnap",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Install-Docker-di-Ubuntu-18.04-LTS",
          "words": 706,
          "sentences": 50,
          "series": "docker",
          "seasonTitle": "installations",
          "season": 1,
          "episode": 2,
          "isPublished": true,
          "timeToRead": "4 minutes"
        },
        "body": "Bagi web developer serta pengguna OS berbasis Linux seperti Ubuntu, sering kali mendapatkan tugas untuk 'deploy' website ke beberapa remote VM (Virtual Machine) atau VPS. Namun beberapa kali gue mendapatkan kesulitan untuk menyamakan config di VPS/VM dengan laptop yang digunakan untuk develop website.\n\nMisal, jika ada project untuk membuat Website dengan spesifikasi server tujuan menggunakan CentOS, RDBMS Postgres, dan php7, sementara laptop yang digunakan untuk develop website adalah Ubuntu 18.04 tanpa terinstall Postgres dan php7 akan sangat ~~malas~~ makan waktu untuk melakukan konfigurasi environment development dengan environment server tujuan. Mau tidak mau di local harus install php7 dan posgres, belum lagi cara installasi kedua apps berbeda yang local pakai apt dan server pakai dnf, repot sekali.\n\n[Docker](https://docker.com) merupakan salah satu solusi tepat untuk kasus tersebut, karena docker memiliki kemampuan untuk membuat 'Container' yang dapat di config menyerupai VPS/VM server, tanpa harus mengganggu environment yang ada di lokal. Konfigurasi mulai dari OS yang dipakai, aplikasi apa saja yang harus di install dalam image tersebut dapat dikemas dalam bentuk `Dockerfile` yang ditulis dengan gaya bahasa `yaml`.\n\nNah, cukup dulu bahas dockernya, mari kita lanjut ke cara installasi docker di ubuntu 18.04:\n\n1. pastikan apt repository di update dulu\n\n```bash\nsudo apt update\n```\n\n2. install beberapa packages agar memungkinkan apt menggunakan package di HTTPS\n\n```bash\nsudo apt install apt-transport-https ca-certificates curl software-properties-common\n```\n\n3. lalu tambahkan official [GPG key](https://gnupg.org/) milik docker dengan perintah:\n\n```bash\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n4. lanjut daftarkan repo docker kedalam repo apt lokal\n\n```bash\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\"\n```\n\n5. sebenarnya ubuntu sudah auto update repositori ketika kita tambahkan dengan perintah `add-apt-repository` (hah?! kita?), tapi pastikan lagi saja dengan jalankan perintah update:\n\n```bash\nsudo apt update\n```\n\n6. nah sekarang check apakah docker sudah ada di dalam repositori apt lokal:\n\n```bash\napt-cache policy docker-ce\n```\n\nkalau sudah ada, biasanya akan ada output seperti ini:\n\n```bash\ndocker-ce:\n  Installed: (none)\n  Candidate: 18.03.1~ce~3-0~ubuntu\n  Version table:\n     18.03.1~ce~3-0~ubuntu 500\n        500 https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages\n```\n\n7. jika tak ada masalah, lanjut install docker dengan perintah apt\n\n```bash\nsudo apt install docker-ce\n```\n\n8. periksa apakah docker sudah dapat di running dengan perintah\n\n```bash\nsudo systemctl status docker\n```\n\nketika dijalankan akan ada output seperti ini:\n\n```bash\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sat 2020-03-21 11:25:06 WIB; 3h 52min ago\n     Docs: https://docs.docker.com\n Main PID: 1568 (dockerd)\n    Tasks: 14\n   Memory: 126.1M\n   CGroup: /system.slice/docker.service\n           └─1568 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n\n```\n\n9. terakhir coba jalankan perintah `docker` untuk memastikan docker benar-benar dapat digunakan:\n\n```bash\ndocker\n```\n\nakan muncul output manual dari docker seperti ini:\n\n```bash\n\nUsage:\tdocker [OPTIONS] COMMAND\n\nA self-sufficient runtime for containers\n\nOptions:\n      --config string      Location of client config files (default \"/home/hare/.docker\")\n  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with \"docker context use\")\n  -D, --debug              Enable debug mode\n  -H, --host list          Daemon socket(s) to connect to\n  -l, --log-level string   Set the logging level (\"debug\"|\"info\"|\"warn\"|\"error\"|\"fatal\") (default \"info\")\n      --tls                Use TLS; implied by --tlsverify\n      --tlscacert string   Trust certs signed only by this CA (default \"/home/hare/.docker/ca.pem\")\n      --tlscert string     Path to TLS certificate file (default \"/home/hare/.docker/cert.pem\")\n      --tlskey string      Path to TLS key file (default \"/home/hare/.docker/key.pem\")\n      --tlsverify          Use TLS and verify the remote\n  -v, --version            Print version information and quit\n```\n\n\\*jika tidak bisa running, dan muncul error `ERR PERMISSION DENIED`, gunakan sudo untuk menjalankan docker:\n\n```bash\nsudo docker\n```\n\nSekarang docker sudah terinstall, sekarang tinggal explore lebih dalam tentang docker di [dokumentasi offical docker](https://docs.docker.com/) dan bisa juga explore container apa saja yang dapat di install atau di download ke local di [docker hub](https://hub.docker.com/).\n\nSemoga bermanfaat, cheers 🥂\n"
      }
    ]
  },
  {
    "js101": [
      {
        "title": "Statement If-Else di javascript",
        "date": "2020-05-16",
        "description": "Atur program dengan percabangan if-else",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1547643547-c0738bcf65cb?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "Marcel Strauß",
          "unsplashAccount": "martzzl",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Statement-If-Else-di-javascript",
          "words": 1,
          "sentences": 1,
          "series": "js101",
          "seasonTitle": "control",
          "season": 4,
          "episode": 1,
          "isPublished": false,
          "timeToRead": "0 minutes"
        },
        "body": ""
      },
      {
        "title": "Statement Switch-Case di javascript",
        "date": "2020-05-16",
        "description": "Cara menangani percabangan yang dengan switch-case, ez.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1468404166635-56e2d75ee491?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "Diomari Madulara",
          "unsplashAccount": "diomari",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Statement-Switch-Case-di-javascript",
          "words": 1,
          "sentences": 1,
          "series": "js101",
          "seasonTitle": "control",
          "season": 4,
          "episode": 2,
          "isPublished": false,
          "timeToRead": "0 minutes"
        },
        "body": ""
      },
      {
        "title": "Perulangan dengan statement For di javascript.",
        "date": "2020-05-16",
        "description": "mempelajari cara mengulang statement dengan for.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1527266237111-a4989d028b4b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "Tine Ivanič",
          "unsplashAccount": "tine999",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Perulangan-dengan-statement-For-di-javascript.",
          "words": 1,
          "sentences": 1,
          "series": "js101",
          "seasonTitle": "control",
          "season": 4,
          "episode": 3,
          "isPublished": false,
          "timeToRead": "0 minutes"
        },
        "body": ""
      },
      {
        "title": "Perulangan dengan statement For di javascript.",
        "date": "2020-05-16",
        "description": "mempelajari cara mengulang statement dengan for.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1474806246163-78af80f5d266?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1267&q=80",
          "photographer": "Claire Satera",
          "unsplashAccount": "daisybisley",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Perulangan-dengan-statement-For-di-javascript.",
          "words": 1,
          "sentences": 1,
          "series": "js101",
          "seasonTitle": "control",
          "season": 4,
          "episode": 4,
          "isPublished": false,
          "timeToRead": "0 minutes"
        },
        "body": ""
      },
      {
        "title": "Perulangan dengan statement For di javascript.",
        "date": "2020-05-16",
        "description": "mempelajari cara mengulang statement dengan for.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1510685576190-7ff8afa1102b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "Mikaala Shcakelford",
          "unsplashAccount": "mikaala",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Perulangan-dengan-statement-For-di-javascript.",
          "words": 1,
          "sentences": 1,
          "series": "js101",
          "seasonTitle": "control",
          "season": 4,
          "episode": 5,
          "isPublished": false,
          "timeToRead": "0 minutes"
        },
        "body": ""
      },
      {
        "title": "Perulangan dengan statement For di javascript.",
        "date": "2020-05-16",
        "description": "mempelajari cara mengulang statement dengan for.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1495658013006-a2069f54d3d7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1489&q=80",
          "photographer": "Andrik Langfield",
          "unsplashAccount": "andriklangfield",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Perulangan-dengan-statement-For-di-javascript.",
          "words": 1,
          "sentences": 1,
          "series": "js101",
          "seasonTitle": "control",
          "season": 4,
          "episode": 6,
          "isPublished": false,
          "timeToRead": "0 minutes"
        },
        "body": ""
      },
      {
        "title": "Functions dan Arrow Functions",
        "date": "2020-05-12",
        "description": "function biasa dan function yang disimpan dalam variable anonymous function, gitu deh.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1508921234172-b68ed335b3e6?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "Taras Shypka",
          "unsplashAccount": "bugsster",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Functions-dan-Arrow-Functions",
          "words": 658,
          "sentences": 45,
          "series": "js101",
          "seasonTitle": "functions",
          "season": 3,
          "episode": 1,
          "isPublished": true,
          "timeToRead": "3 minutes"
        },
        "body": "Pada [artikel sebelumnya](/js101/functions/) yang membahas cara membuat function, menjelaskan cara untuk membuat function adalah dengan bentuk seperti ini:\n\n```js\nfunction namaFunction(argument) {\n  // function body\n  return 'some value';\n}\n\n// function calling\nnamaFunction('abc');\n```\n\nJavaScript memungkinkan menyimpan function kedalam suatu variabel, dengan cara mendefinisikan anonymous function / lambda dan menyimpannya kedalam suatu variabel.\n\n```js\nconst namaFunction = function (argument) {\n  // function body\n  return 'some value';\n};\n\n// function calling\nnamaFunction('abc');\n```\n\neven better, es6 menyediakan notasi **arrow function** atau **fat arrow function** `() => { }`:\n\n```js\nconst namaFunction = (argument) => {\n  // function body\n  return 'some value';\n};\n\n// function calling\nnamaFunction('abc');\n```\n\natau jika function langsung me-return value dapat ditulis dengan bentuk:\n\n```js\nconst namaFunction = (argument) => 'some value';\n```\n\nUntuk mempermudah dalam memahami penulisan arrow function, mari gunakan untuk solve kasus ini:\n\n**Buatlah perhitungan faktorial, dengan satu parameter bilangan sebagai pembatas faktorial.**\n\nmisal:\n\n`faktorial(4)` akan menghasilkan `24` karena `1 x 2 x 3 x 4` adalah `24`.\n\n#### Solusi\n\nSolving dengan menggunakan `function` biasa:\n\n```js\nfunction faktorial(n) {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * faktorial(n - 1);\n}\n```\n\nSolving dengan _anonymous function_:\n\n```js\nconst faktorial = function (n) {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * faktorial(n - 1);\n};\n```\n\nSolving dengan menggunakan Arrow function `() =>`:\n\n```js\nconst faktorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * faktorial(n - 1);\n};\n```\n\natau lebih singkat lagi, model _one-liner_:\n\n```js\nconst faktorial = (n) => (n <= 1 ? 1 : n * faktorial(n - 1));\n```\n\nSemua solusi diatas memiliki output yang sama. Silahkan dicoba di console browser / terminal yang terinstall node.\n\n### Kapan arrow function tak dapat digunakan?\n\nOk, arrow function memang terlihat dapat mempersingkat dalam penulisan code, namun apakah harus selalu pakai arrow function?\n\ntidak, ada beberapa situasi dimana arrow function tak dapat digunakan.\n\n#### Kondisi 1: penggunaan `this` dalam object\n\nTidak seperti `function` biasa, arrow function tidak memiliki `this` yang merujuk ke dirinya, sehingga akan mengembalikan nilai `undefined`.\n\nContoh:\n\n```js\nconst robot = {\n  firstName: 'han',\n  lastName: 'tyumi',\n  getFullName() {\n    return `${this.firstName}-${this.lastName}`;\n  },\n};\n\nconsole.log(robot.getFullName());\n// han-tyumi\n```\n\ndengan arrow function:\n\n```js\nconst robot = {\n  firstName: 'han',\n  lastName: 'tyumi',\n  getFullName: () => `${this.firstName}-${this.lastName}`,\n};\n\nconsole.log(robot.getFullName());\n// undefined-undefined\n```\n\n#### Kondisi 2: hoisting\n\nKarena function dalam arrow function adalah anonymous / lambda function yang di store dalam variabel, jika belum di inisialisasi maka function tersebut tak dapat dikenali. Beda dengan function yang didefinisikan sebagai function, akan di hoist oleh javascript sehingga tetap dapat digunakan.\n\nContoh:\n\nJika menggunakan `function`\n\n```js\nconsole.log(greet('hendra')); // hello hendra\n\nfunction greet(name) {\n  return `hello ${name}`;\n}\n```\n\nJika menggunakan arrow function `() => {}`\n\n```js\nconsole.log(greet('hendra'));\n// ReferenceError: Cannot access 'greet' before initialization\n\nconst greet = (name) => `hello ${name}`;\n```\n\n### `this` dalam Arrow Function\n\nKarena arrow function tidak memiliki `this` yang merujuk ke diri nya, maka sangat berguna bila ingin menggunakan `this` yang merujuk ke konteks global.\n\nBiar ngga bingung mari lihat contoh ini:\n\n**Buatlah fungsi hitung mundur selama dua detik, akan mencetak angka yang tersisa bila kurang dari 2 detik dan akan berhenti dan mencetak waktu habis setelah dua detik.**\n\n**Solusi**:\n\nDengan function\n\n```js\nfunction countDown() {\n  this.message = 'Waktu habis';\n  this.count = 2;\n\n  const context = this; // assign nilai 'this' ke context agar dikenali di interval\n\n  this.interval = setInterval(function () {\n    context.count--;\n    console.log(context.count);\n    if (context.count <= 0) {\n      console.log(context.message);\n      clearInterval(context.interval);\n    }\n  }, 1000);\n}\n\ncountDown();\n```\n\nDengan arrow function\n\n```js\nfunction countDown() {\n  this.message = 'Waktu habis';\n  this.count = 2;\n\n  this.interval = setInterval(() => {\n    this.count--;\n    console.log(this.count);\n    if (this.count <= 0) {\n      console.log(this.message);\n      clearInterval(this.interval);\n    }\n  }, 1000);\n}\n\ncountDown();\n```\n\nJika dengan function biasa, nilai `this` perlu di assign kedalam variabel, agar tidak tercampur dengan `this` yang ada di dalam function callback setInterval. Sementara dengan _arrow function_ nilai `this` merujuk tepat ke konteks global jadi tak perlu lagi meng-assign nilai `this` kedalam variabel.\n\nOkay segitu dulu buat function dan arrow function, semoga bermanfaat.\n\nCheers 🥂\n"
      },
      {
        "title": "Scope of Variables",
        "date": "2020-05-15",
        "description": "Sampai sejauh mana variable dapat diakses?",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1473075109809-7a17d327bdf6?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "Robert Katzki",
          "unsplashAccount": "ro_ka",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Scope-of-Variables",
          "words": 438,
          "sentences": 35,
          "series": "js101",
          "seasonTitle": "functions",
          "season": 3,
          "episode": 2,
          "isPublished": true,
          "timeToRead": "2 minutes"
        },
        "body": "Variabel memiliki scope / jangkauan terhadap blok program / fungsi. Jika di [artikel variabel & constants ini](/js101/introduction/1-variables-constants/) kita sudah membahas sedikit perihal scope dari suatu variabel dengan keyword `var`, `let`, dan `const`. Kali ini kita akan membahas lebih dalam serta contoh bagaimana kita (HAAAAAAAAAAAAAAH~ KYTTAAAA!?~) dapat mengetahui jangkauan dari variabel.\n\n### Local & Global\n\nBerdasarkan jangkauannya, variable dapat dibedakan menjadi 2 yaitu, _local_ dan _global_. Mari kita lihat di code berikut:\n\n```js\nconst CURRENT_YEAR = 2020;\n\nconst profile = {\n  firstName: 'Hendra',\n  lastName: 'Sadewa',\n  birth: {\n    year: 1994,\n    month: 07,\n    day: 16,\n  },\n};\n\nfunction getShortProfile(user) {\n  const fullName = `${user.firstName} ${user.lastName}`;\n  const age = CURRENT_YEAR - user.birth.year;\n\n  const profile = {\n    ...user,\n    fullName,\n    age,\n  };\n\n  console.log('profile - getShortProfile', profile);\n\n  return profile;\n}\n\nconst shortProfile = getShortProfile(profile);\n\nconsole.log('profile - global', profile);\n\nconsole.log(\n  `Halo ${shortProfile.fullName}`,\n  `You're ${shortProfile.age} years old`\n);\n```\n\nOutput:\n\n```\nprofile - getShortProfile {\n  firstName: 'Hendra',\n  lastName: 'Sadewa',\n  birth: { year: 1994, month: 7, day: 16 },\n  fullName: 'Hendra Sadewa',\n  age: 26\n}\n\nprofile - global {\n  firstName: 'Hendra',\n  lastName: 'Sadewa',\n  birth: { year: 1994, month: 7, day: 16 }\n}\n\nHalo Hendra Sadewa You're 26 years old\n```\n\nAda beberapa hal yang perlu diperhatikan yaitu:\n\n- `CURRENT_YEAR` dan `profile` yang didefinisikan diluar blok fungsi dapat disebut dengan variabel _global_, dan dapat diakses lewat dalam blok fungsi `getShortProfile`.\n\n- `CURRENT_YEAR` digunakan untuk menghitung nilai `age` didalam `getShortProfile`, tanpa ada masalah.\n\n- `profile` didalam `getShortProfile` berbeda dengan variabel `profile` yang didefinisikan di luar function. `profile` yang berada didalam hanya berlaku didalam / local functionnya saja, oleh karena itu disebut dengan `local` variable.\n\n  Ini dibuktikan dengan mencetak kedua variabel dengan perintah `console.log` yang menghasilkan nilai yang berbeda namun dengan nama variabel yang sama.\n\nOke dari code diatas terbukti ya kalo perbedaan antara local dan global variabel. E tapi ada pertanyaan ni.\n\n![](https://media.giphy.com/media/JTgBY1JUFHHGM/giphy.gif)\n\n**Q:** gimana kalo kita definisikan variabel didalam function terus, I mau akses di luar function apakah bisa gan?\n\n**A:** nga, ngga bisa, karena jangkauan nya variabel yang didefinisikan didalam function merupakan variabel local, jika keluar dari block nya akan tak terdefinisi. Mari kita buktikan dengan code berikut:\n\n```js\nfunction greeting() {\n  const username = 'hendra';\n  return username;\n}\n\n// mencoba akses username didalam function greeting\nconsole.log(username);\n```\n\nketika dirunning, program akan menghasilkan _Reference error: username is not defined_. Artinya variabel `username` yang didefinisikan di dalam function `greeting` tidak dapat dikenali selain didalam function `greeting`.\n\nOkay mungkin cukup untuk bahasan scsope dalam variabel ini, kita akan bahas callback function dalam artikel berikutnya, have a good friday guys. Oiya, kalo bingung atau menemukan kesalahan dalam artikel ini, silahkan mention gue di twitter [@sadevva\\_](https://twitter.com/sadevva_).\n\nCheers 🥂\n"
      },
      {
        "title": "Callback function",
        "date": "2020-05-16",
        "description": "Ya fungsi yang di pass ke fungsi lain yang nantinya akan dipanggil dalam fungsi nya~ pusing kan~",
        "heroImage": {
          "src": "https://images.unsplash.com/uploads/1413222992504f1b734a6/1928e537?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "Pavan Trikutam",
          "unsplashAccount": "ptrikutam",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Callback-function",
          "words": 513,
          "sentences": 41,
          "series": "js101",
          "seasonTitle": "functions",
          "season": 3,
          "episode": 3,
          "isPublished": true,
          "timeToRead": "3 minutes"
        },
        "body": "Fungsi dalam javascript dianggap sebagai object, oleh karena itu fungsi dapat memungkinkan untuk passing fungsi sebagai parameter fungsi. Fungsi yang di-passing kedalam argumen fungsi disebut dengan _Callback Function_. Tujuannya adalah untuk mengatur kapan fungsi ini dipanggil atau di-_callback_.\n\n![](https://media.giphy.com/media/10HHiQbUEcOMr6/giphy.gif)\n\nSedikit bikin bingung ya, mari kita (HAAAA? QYTAA!?) check contoh berikut:\n\n```js\nfunction greeting(name) {\n  console.log(`Hello ${name}`);\n}\n\nfunction greetMe(callback, name) {\n  console.log('Welcome back');\n  callback(name);\n}\n\ngreetMe(greeting, 'Hendra');\n```\n\nDari contoh diatas, function `greeting` akan dipanggil di dalam function `greetMe`.\n\nTujuannya apa ya, bukannya lebih ribet gan? Nah, tujuannya agar fungsi yang di passing lewat argumen / _callback function_ dapat diatur pemanggilannya.\n\nMari kita coba solve kasus ini:\n\n**Buatlah fungsi countdown yang akan menghitung mundur dari sekian detik, kemudian jika waktu habis tampilkan message \"Waktu habis\", jika waktu belum habis, tampilkan siswa waktu dalam detik.**\n\nUntuk membuat countdown, kita butuh interval, tujuannya untuk mengulang suatu statement dengan delay sekian detik.\n\n```js\nsetInterval(callback, delayTimeInMs);\n```\n\nSetInterval memiliki dua buah parameter yaitu:\n\n- `callback`: function yang harus dijalankan selama interval berlangsung.\n- `delayTimeInMs`: jumlah waktu delay setiap interval dalam satuan milidetik.\n\nOk, sekarang mari buat function countdown. Jika dipahami melalui deskripsi kasus spesifikasi dari fungsi countdown adalah:\n\n- memiliki parameter:\n  - `count`: bilangan yang akan menjadi acuan untuk menghitung mundur.\n  - `message`: pesan yang akan ditampilkan ketika waktu habis.\n- memiliki body function berisi statement:\n  - definisikan interval yang akan mengurangi nilai `count` setiap interval terjadi.\n  - pada setiap interval, check apakah nilai `count` sudah habis.\n  - jika sudah habis, akan mencetak `message`.\n  - jika belum habis tampilkan siswa waktu.\n- memiliki definisi konstanta:\n  - `delay = 1000`: 1000 didapat dari konversi milidetik ke detik (1 detik = 1000 milidetik).\n\nSolusi dalam code:\n\n```js\nfunction countDown(count = 10, message) {\n  const delay = 1000;\n  const interval = setInterval(onTimeInterval, delay);\n\n  function onTimeInterval() {\n    count--;\n    console.log(count);\n    if (count <= 0) {\n      console.log(message);\n      clearInterval(interval);\n    }\n  }\n}\n\ncountDown(10, 'Waktu habis');\n```\n\nperhatikan pada bagian:\n\n```js\nsetInterval(onTimeInterval, delay);\n```\n\nterdapat _passing_ fungsi `onTimeInterval` kedalam `setInterval`, yang nantinya akan dijalankan ketika interval terjadi.\n\nJika di run, program akan menghasilkan output seperti ini:\n\n```js\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\nWaktu habis\n```\n\nKasus sudah solved dengan program yang telah dibuat.\n\nbut wait,\n\n![](https://media.giphy.com/media/3o7btZ1Gm7ZL25pLMs/giphy.gif)\n\n**Q**: Hmm, kenapa ngga `console.log()` aja bang setelah panggil countdown? kek gini ni misalnya:\n\n```js\nfunction countDown(count) {\n  const delay = 1000;\n  const interval = setInterval(onTimeInterval, delay);\n\n  function onTimeInterval() {\n    count--;\n    console.log(count);\n    if (count <= 0) {\n      clearInterval(interval);\n    }\n  }\n}\n\ncountDown(10);\nconsole.log('Waktu habis');\n```\n\n**Q**: Bukannya bakalan _nyetak_ message, setelah countdown-nya selesai?\n\n**A**: Ngga bisa gan, hasilnya bakalan jadi seperti ini:\n\n```\nWaktu habis\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n```\n\n**Q**: haaaa?\n\n![](https://media.giphy.com/media/2XskdWuNUyqElkKe4bm/giphy.gif)\n\n**A**: Teks \"Waktu habis\" akan di cetak duluan dikarenakan proses setInterval yang akan dijalankan secara _asynchronous_, artinya kode akan dieksekusi tanpa menunggu proses sebelumnya selesai. Oleh karena itu js akan melanjutkan ke statement `console.log` yang terletak setelah pemanggilan function `countdown`. Oleh karena itu kita dapat menggunakan callback untuk mengatur agar statement untuk mencetak `\"Waktu habis\"` dipanggil setelah waktu nya habis.\n\nOkay, untuk callback sepertinya sampai sini dulu, kita akan bahas implementasi callback lebih lengkap dalam section array dan juga asynchronous.\n\nthanks for your time and cheers 🥂\n"
      },
      {
        "title": "Fungsi di Javascript",
        "date": "2020-04-18",
        "description": "Salah satu elemen penting di js, fungsi, mengapa penting? Baca aja yuk. biar traffic situs gue naik.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1555949963-aa79dcee981c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "Shahadat Rahman",
          "unsplashAccount": "hishahadat",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Fungsi-di-Javascript",
          "words": 1168,
          "sentences": 55,
          "series": "js101",
          "seasonTitle": "functions",
          "season": 3,
          "episode": 0,
          "isPublished": true,
          "timeToRead": "6 minutes"
        },
        "body": "Fungsi _f_ atau _f(x)_, (dengan symbol x sebagai argumen fungsi), merupakan kumpulan statement / code / ekspresi yang di bungkus dengan suatu nama, tujuannya adalah untuk mengerjakan suatu _task_ atau tugas dengan informasi yang diberikan.\n\nDengan adanya fungsi, memungkinkan untuk menjalankan kumpulan dari kode / statement dengan memanggil fungsinya tanpa menulis ulang kodenya dan hasilnya dapat disimpan kedalam suatu variabel, jika tidak menghasilkan atau `return` nilai, maka nilai yang akan dikembalikan adalah `undefined`. Setiap fungsi harus memiliki tanggung jawab yang berbeda dari fungsi lain. Supaya tak ada pengulangan / redudansi code yang ditulis.\n\n#### Cara penulisan fungsi di javascript:\n\n```js\nfunction namaFungsi(argumen // opsional) {\n    /* statement yang mau di bungkus */\n    return nilaiYangMauDihHasilkan; // opsional\n}\n\n/* cara manggil */\nlet hasil = namaFungsi('nilai yang mau dimasuki kedalam fungsi');\n```\n\n### Definisi dan Menggunakan Fungsi\n\nUntuk lebih jelasnya mari kita buat fungsi yang akan menghasilkan kalimat `hello, I'm a human`. Ada dua cara, yaitu:\n\n#### Fungsi Tanpa Return Value:\n\n```js\n// definisi fungsi\nfunction greeting() {\n  // cetak teks\n  console.log(\"hello, I'm a human\");\n}\n\ngreeting();\n```\n\nFungsi tanpa `return` langsung mencetak teks nya, karena terdapat statement `console.log` di dalam fungsi.\n\n#### Fungsi Dengan Return Value:\n\n```js\n// definisi fungsi\nfunction greeting() {\n  // mengembalikan nilai teks\n  return \"hello, I'm a human\";\n}\n\n// panggil fungsi greeting cetak nilai\nconsole.log(greeting());\n```\n\nSementara dengan fungsi dengan `return` tidak langsung mencetak hasilnya, namun mengembalikan nilai teks `\"hello, I'm a human\"` ketika pemanggilan fungsi `greeting()` terjadi.\n\n### Passing Nilai Ke dalam Fungsi\n\nArgumen dalam fungsi dapat digunakan untuk _passing_ nilai ke dalam fungsi. Anggaplah argumen ini sebagai variabel yang dapat dikenali oleh fungsi.\n\nMisal jika ingin mencetak teks `hello, my name is hendra, I'm a human`, namun, nilai dari nama `hendra` ingin kita ganti jadi sadewa tanpa merubah kode, kita dapat definisikan argumen dengan nama `name` kedalam definisi fungsi.\n\n```js\n// definisi fungsi\nfunction greeting(name) {\n  // mengembalikan nilai teks\n  return `hello, my name is ${name}, I'm a human`;\n}\n\n// simpan hasil pemanggilan kedalam variabel\nconst greetingHendra = greeting('hendra');\nconst greetingSadewa = greeting('sadewa');\n\n// cetak nilai\nconsole.log(greetingHendra);\nconsole.log(greetingSadewa);\n```\n\njika di run, nilai `greetingHendra` akan berisi teks `hello, my name is hendra, I'm a human`, dan `greetingSadewa` akan berisi teks `hello, my name is sadewa, I'm a human`.\n\n#### Q1: apa yang terjadi bila fungsi dipanggil tanpa memberikan nilai kedalam argumen ?\n\njika fungsi `greeting(name)` dari contoh diatas kita panggil tanpa argumen, akan menghasilkan nilai `hello, my name is undefined, I'm a human`. Karena nilai name akan bernilai `undefined` karena tak ada nilai yang di pass saat pemanggilan fungsi.\n\n```js\nconsole.log(greeting());\n// hello, my name is undefined, I'm a human\n```\n\n#### Multiple Argument\n\nDefinisi fungsi dapat mendukung multiple argumen dengan cara memberikan comma (,) pada setiap argumen, untuk jelasnya mari kita buat program untuk cetak `hello, my name is han-tyumi, I'm a cyborg`. Dengan ketentuan nilai nama `han-tyumi` dan spesies `cyborg` dapat diubah sesuai dengan argumen-nya.\n\n```js\n// definisi fungsi\nfunction greeting(name, species) {\n  // mengembalikan nilai teks\n  return `hello, my name is ${name}, I'm a ${species}`;\n}\n\nconst cyborg = greeting('han-tyumi', 'cyborg');\nconst cat = greeting('appolo', 'cat');\nconst unknown = greeting();\nconst penguin = greeting('penguin?');\nconst tooMuch = greeting('too', 'much', 'argument');\n\nconsole.log(cyborg);\nconsole.log(cat);\nconsole.log(unknown);\nconsole.log(penguin);\nconsole.log(tooMuch);\n```\n\nOutput yang akan dihasilkan dari program di atas adalah:\n\n```\nhello, my name is han-tyumi, I'm a cyborg\nhello, my name is appolo, I'm a cat\nhello, my name is undefined, I'm a undefined\nhello, my name is penguin?, I'm a undefined\nhello, my name is too, I'm a much\n```\n\nSeperti array, argumen akan di lihat dari posisinya, jika hanya di provide satu nilai saja seperti pada `penguin`, argumen setelahnya akan `undefined`, sementara jika tak diberikan sama sekali seperti di `unknown` akan bernilai undefined, terakhir jika argumen melebihi dari di definisikan fungsi, maka akan diabaikan seperti pada `tooMuch`.\n\n#### Q2: Bisa ga si dikasih default value gitu di argumennya bang?\n\nbisa banget, caranya gini:\n\n```js\nfunction greeting(name = 'anon', species = 'unknown') {\n  // mengembalikan nilai teks\n  return `hello, my name is ${name}, I'm a ${species}`;\n}\n\nconst unknown = greeting();\nconst penguin = greeting('penguin?');\n\nconsole.log(unknown);\nconsole.log(penguin);\n```\n\nDengan definisi `name = 'anon'` dan `species = 'unknown'` nilai dari pemangillan `greeting()` akan menghasilkan teks `hello, my name is anon, I'm a unknown`, sedangkan `penguin` akan menghasilkan `hello, my name is penguin?, I'm a unknown`.\n\n#### Object as a argument\n\nDalam js, ada cara yang cukup unik untuk definisikan argumen dalam fungsi, yaitu mendifinisikannya sebagai object. Mari kita coba ubah function `greeting` agar menggunakan object `{ name, species }` sebagai argumen.\n\n```js\n// definisi fungsi\nfunction greeting({ name = 'anon', species = 'unknown' }) {\n  // mengembalikan nilai teks\n  return `hello, my name is ${name}, I'm a ${species}`;\n}\n\nconst cyborg = greeting({ name: 'han-tyumi', species: 'cyborg' });\nconst author = greeting({ species: 'human', name: 'hendra' });\nconst penguin = greeting({ name: 'penguin?' });\nconst anon = greeting({});\n\nconsole.log(cyborg);\nconsole.log(author);\nconsole.log(penguin);\nconsole.log(anon);\n```\n\nProgram diatas akan menghasilkan:\n\n```\nhello, my name is han-tyumi, I'm a cyborg\nhello, my name is hendra, I'm a human\nhello, my name is penguin?, I'm a unknown\nhello, my name is anon, I'm a unknown\n```\n\nPattern ini cukup enak untuk dibaca, karena pada saat memanggil fungsi kita tahu nilai apa yang akan dipassing ke dalam fungsi melalui 'key' dari object, karena menggunakan key, urutan dari argumen pun tidak berpengaruh. seperti contoh pada `author` key `species` dan `name` urutannya terbalik namun tetap menghasilkan nilai `hello, my name is hendra, I'm a human`.\n\nPerlu diperhatikan pada saat mengisi nilai `anon` function `greeting` dipanggil dengan menyertakan object kosong `{}`, jika tidak program akan error karena tidak dapat destructure nilai dari variabel / argumen yang di passing kedalam fungsi. Walaupun berbentuk `{ name, species}` argumen fungsi `greeting` tetap hanya memiliki 1 buah argumen, hanya saja argumen tersebut di destructure menjadi `{name, species}`.\n\n### Return values\n\nNilai yang dikembalikan oleh fungsi dapat berupa tipe data primitive ataupun non-primitves, untuk non-primitives kita dapat melakukan destructure agar lebih mudah dalam assignment variabel.\n\ncontoh:\n\nMenghitung luas dan keliling persegi.\n\n```js\nfunction luasPersegi(panjang, lebar) {\n  return panjang * lebar;\n}\n\nfunction kelilingPersegi(panjang, lebar) {\n  return 2 * (panjang + lebar);\n}\n\nfunction hitungPersegi(panjang, lebar) {\n  const luas = luasPersegi(panjang, lebar);\n  const keliling = kelilingPersegi(panjang, lebar);\n  return [luas, keliling];\n}\n\nconst persegi = hitungPersegi(5, 4);\n\nconsole.log('luas persegi adalah', persegi[0]);\nconsole.log('keliling persegi adalah', persegi[1]);\n```\n\nJika di perhatikan, variabel yang di cetak dalam `console.log` kurang dapat di mengerti dalam sekali baca karena hanya mengacu pada index dari persegi saja. Untuk memudahkan kita dapat mengubahnya menjadi\n\n```js\nfunction luasPersegi(panjang, lebar) {\n  return panjang * lebar;\n}\n\nfunction kelilingPersegi(panjang, lebar) {\n  return 2 * (panjang + lebar);\n}\n\nfunction hitungPersegi(panjang, lebar) {\n  const luas = luasPersegi(panjang, lebar);\n  const keliling = kelilingPersegi(panjang, lebar);\n  return [luas, keliling];\n}\n\nconst [luas, keliling] = hitungPersegi(5, 4);\n\nconsole.log('luas persegi adalah', luas);\nconsole.log('keliling persegi adalah', keliling);\n```\n\nSifat destructure ini berlaku juga bila return value dari hitung persegi adalah object.\n\n```js\nfunction luasPersegi(panjang, lebar) {\n  return panjang * lebar;\n}\n\nfunction kelilingPersegi(panjang, lebar) {\n  return 2 * (panjang + lebar);\n}\n\nfunction hitungPersegi(panjang, lebar) {\n  const luas = luasPersegi(panjang, lebar);\n  const keliling = kelilingPersegi(panjang, lebar);\n  return { luas, keliling };\n}\n\nconst { luas, keliling } = hitungPersegi(5, 4);\n\nconsole.log('luas persegi adalah', luas);\nconsole.log('keliling persegi adalah', keliling);\n```\n\nketiga potongan program tersebut akan menghasilkan output yang sama, yaitu:\n\n```\nluas persegi adalah 20\nkeliling persegi adalah 18\n```\n\n\\*catatan: untuk perihal destructuring object, dapat dibaca dalam artikel [assignment operators](/js101/operators/1-assignment-operators/).\n\nOkay sepertinya sudah cukup untuk intro kedalam fungsi dalam javascript, masih banyak lagi hal yang akan di bahas namun akan panjang sekali bila jadi satu artikel. ~~alesan padahal mah udah pusing mau bahas apa lagi~~ , jadi gue tutup dulu sampai sini ya, see ya later.\n\nCheers 🥂\n"
      },
      {
        "title": "Mengenal Dasar Javascript, Hello World!",
        "date": "2020-03-19",
        "description": "Semuanya diawali dengan menyapa dunia~",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1553404955-af4e8fc7f99f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=400&q=60",
          "photographer": "Kevin Butz",
          "unsplashAccount": "kevin_butz",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Mengenal-Dasar-Javascript,-Hello-World!",
          "words": 467,
          "sentences": 44,
          "series": "js101",
          "seasonTitle": "basic",
          "season": 1,
          "episode": 0,
          "isPublished": true,
          "timeToRead": "2 minutes"
        },
        "body": "Hello World!\n\nJika kalian sebelumnya sudah pernah membuat program, pastinya sudah tau kan ritual awal para programmer jika menemukan teknologi atau bahasa pemrograman baru? Kalau belum mari kita kenalan dengan Hello world.\n\nTujuan dari hello world adalah mencetak kalimat 'Hello World' tanpa petik di terminal / browser / UI lainnya. Dengan mencetak hello world diharapkan kalian dapat memastikan minimal installasi node js kalian berhasil. Kali ini kita (hah? kita) coba cetak hello world di terminal ya. Pastikan kalian sudah mengunduh dan memasang node js.\n\nJika sudah, mari buka terminal / cmd kalian, dan jalankan perintah:\n\n```sh\nnode\n```\n\nKemudian, akan tampil intepreter dengan teks seperti berikut:\n\n```sh\nWelcome to Node.js v13.11.0.\nType \".help\" for more information.\n>\n```\n\nintepreter runtime node js akan menunggu perintah dari kalian, mari kita (hah, kita?) jalankan perintah untuk mencetak teks di console / terminal / cmd\n\n```js\nconsole.log('Hello World');\n```\n\njika sudah akan muncul:\n\n```bash\nWelcome to Node.js v13.11.0.\nType \".help\" for more information.\n> console.log('Hello World')\nHello World\nundefined\n>\n```\n\nSelamat, kalian sudah berhasil membuat program sederhana dengan menggunakan javascript. Nah sekarang pertanyaannya kok bisa keluar teks Hello World gitu sih? Bingung?\n\nMari kita telaah perintah:\n\n```js\nconsole.log('Hello World');\n```\n\nPerintah tersebut terdiri dari objek `console` yang memanggil fungsi `log` dengan parameter `'Hello World'`.\n\n**Bentar bang, apasih _objek_, _fungsi_ dan _parameter_?**\n\nSederhananya objek itu adalah representasi dari benda nyata, yang memiliki beberapa fungsi tertentu, dan fungsi ini dapat memiliki input berupa data yang dimasukan melalui parameter. Nah untuk mengakses fungsi atau atribut dalam suatu objek, kita gunakan titik.\n\nMari kita berandai andai~\n\nTadi, kita anggap `console` adalah sebuah objek, nah kita anggap `console` ini adalah terminal / cmd kita, dan benda `console` ini punya fungsi bernama `log` yang tugasnya (atau berfungsi) untuk mencetak teks ke layar dengan data yang diberikan atau nama lainnya `parameter`, dari perintah tadi, kita pakai teks `'Hello World'` sebagai parameter karena kita ingin mencetak teks 'Hello World' ke layar terminal. Sehingga bila kita gabungkan menjadi:\n\n```js\nconsole.log('Hello World');\n```\n\nMaka akan tampil lah teks 'Hello World' di layar terminal.\n\n**Oke bang, tapi itu kok petik nya ngga kecetak juga ya ke layar'**\n\nPetik yang mengapit teks Hello World menyatakan bentuk atau tipe data yang kita pakai adalah String atau Teks, javascript tidak dapat mengenali data yang kita masukan adalah teks bila tidak diberi petik.\n\nKita telah selesai menjalankan perintah melalui terminal, nah sekarang kita akan coba menulis program dalam bentuk file javascript (.js).\n\nPertama buatlah file baru dengan ekstensi .js, dan beri nama hello-world.js.\n\nkemudian dalam file hello-world.js, mari kita tuliskan perintah berikut:\n\n```js\nconsole.log('Halo Halo Dunia');\n```\n\njika sudah kembali ke terminal, dan pastikan kalian berada dalam satu direktori dengan file hello-world.js, lalu jalankan perintah\n\n```bash\nnode hello-world.js\n```\n\nnanti akan tampil dilayar terminal kalian teks seperti ini:\n\n```bash\nHalo Halo Dunia\n```\n\nNah, sekarang kita sudah selesai membuat program sederhana dan juga kita sudah berusaha memahami apa yang terjadi dalam program sederhana yang telah kita buat, jika masih ada hal yang membuat bingung, jangan ragu - ragu untuk bertanya atau membuat issue di github di [link Ini issue ini](https://github.com/hare451g/hare451g.github.io/issues).\n\nSemoga artikel ini dapat bermanfaat dan sampai jumpa di artikel berikutnya.\n\nCheers.\n"
      },
      {
        "title": "Variabel dan konstanta di Javascript",
        "date": "2020-03-20",
        "description": "Mencoba mengenal, memahami dan menggunakan variabel dan konstanta dalam javascript.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1527931372109-865f33dff725?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1351&q=80",
          "photographer": "s2 art",
          "unsplashAccount": "s2artz",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Variabel-dan-konstanta-di-Javascript",
          "words": 544,
          "sentences": 27,
          "series": "js101",
          "seasonTitle": "basic",
          "season": 1,
          "episode": 1,
          "isPublished": true,
          "timeToRead": "3 minutes"
        },
        "body": "Dalam pemrograman, sering kali program harus dapat menyimpan nilai sementara, baik nilai dari suatu operasi, ataupun nilai konstan yang akan digunakan kembali. Nilai sementara yang disimpan dapat diberi nama untuk mewakili nilainya, tujuannya adalah agar dapat mudah memanggil kembali nilai yang telah disimpan, Nilai sementara yang diberi nama dapat disebut juga dengan `Variabel`.\n\n## Variabel\n\nVariabel adalah 'wadah' untuk nilai yang dapat diganti dengan nilai baru. Variabel dapat digunakan untuk menyipan nilai nilai primitif (bilangan bulat, text / string) ataupun non-primitif seperti array dan function. Untuk membuat variabel dapat menggunakan keyword `var`. Untuk memahami lebih lanjut, mari kita (HAH~!? KITA?) gunakan contoh berikut:\n\n```js\nvar name = 'Hendra Sadewa';\n\nconsole.log(name); // Hendra Sadewa\n\nname = 'hare';\n\nconsole.log(name); // hare\n```\n\nJika code diatas dijalankan akan menghasilkan output seperti ini:\n\n```bash\nHendra Sadewa\nhare\n```\n\nDari contoh diatas terlihat nilai dari Variabel `name` dapat diubah dengan cara melakukan re-assign nilai `name = 'hare'`.\n\n## Constants\n\nMirip seperti Variabel biasa, namun nilai dari constants tak dapat di re-assign. Bila dipaksa untuk di re-assign, maka akan menimbulkan error. Untuk menggunakan constants cukup definisikan Variabelnya dengan keyword `const`.\n\n```js\nconst name = 'Hendra Sadewa';\n\nconsole.log(name);\n\nname = 'hare'; // error\n```\n\nJika code diatas dijalankan, output seperti ini:\n\n```bash\nHendra Sadewa\nUncaught TypeError: Assignment to constant Variable.\n  at <anonymous>:3:6\n```\n\nError yang terjadi adalah `TypeError` dan menyatakan adanya `Assignment to constant Variable.`, tepat seperti sifat constants yang tak dapat diganti nilainya dengan nilai yang baru.\n\n## Beberapa Hal yang Perlu diperhatikan dalam Penggunaan Variable\n\nDalam penamaan variable, sebisa mungkin dapat mewakili nilai yang disimpan. Bila nilai dalam variable tak perlu untuk diubah, gunakanlah `const`.\n\n```js\nconst userName = 'hendrasadewa';\nconst height = 161;\n\nvar heightCategory = null;\n\nif (height > 180) {\n  heightCategory = 'Tall';\n} else if (height > 160) {\n  heightCategory = 'average';\n} else if (height < 160) {\n  heightCategory = 'short';\n}\n\nconsole.log(\n  username +\n    ' termasuk dalam kategori ' +\n    heightCategory +\n    ' karena memiliki tinggi' +\n    height +\n    'cm'\n);\n```\n\nDari potongan program diatas jika di running akan menghasilkan output:\n\n```bash\nhendrasadewa termasuk dalam kategori average karena memiliki tinggi 161cm\n```\n\nDapat diperhatikan bila penggunaan variable dengan nama yang sesuai dengan nilainya memudahkan programmer lain untuk memahami source code, karena dapat mengetahui secara langsung nilai apa yang disimpan. Penggunaan constant pun tepat karena nilai `username` dan nilai dari `height` tak akan di assign ulang seperti nilai `heightCategory` yang akan berubah sesuai dengan kondisi dari variabel `height`.\n\nMohon hindari lah contoh yang tidak baik seperti ini:\n\n```js\nconst userName = 'hendrasadewa';\nconst h = 161;\n\nvar c = null;\n\nif (height > 180) {\n  c = 'Tall';\n} else if (height > 160) {\n  c = 'average';\n} else if (height < 160) {\n  c = 'short';\n}\n\nconsole.log(\n  username +\n    ' termasuk dalam kategori ' +\n    c +\n    ' karena memiliki tinggi' +\n    h +\n    'cm'\n);\n```\n\nDalam contoh yang kurang baik ini akan menimbulkan ~~perpecahan antar ummat~~ kebingungan karena nama dari variabel yang hanya menggunakan huruf tak dapat mewakili arti dari nilai yang disimpan.\n\nOiya, ada hal yang perlu diingat, bahwa nilai yang disimpan dalam variable tak dapat disimpan secara permanent (persist) karena hanya disimpan dalam runtime atau saat program dijalankan.\n\nOkey, pembahasan untuk variabel dan konstanta sampai disini dulu, semoga dapat membantu dan dimengerti. Bila bingung atau menemukan kesalahan dalam artikel ini, silahkan mention gue di twitter [@sadevva\\_](https://twitter.com/sadevva_).\n\nCheers 🥂\n"
      },
      {
        "title": "Tipe data dan primitives di Javascript",
        "date": "2020-03-21",
        "description": "Mencoba memahami tipe data yang ada di dalam javascript beserta cara menggunakan variabel.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1416339134316-0e91dc9ded92?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1267&q=80",
          "photographer": "Jeff Sheldon",
          "unsplashAccount": "ugmonk",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Tipe-data-dan-primitives-di-Javascript",
          "words": 802,
          "sentences": 55,
          "series": "js101",
          "seasonTitle": "basic",
          "season": 1,
          "episode": 2,
          "isPublished": true,
          "timeToRead": "4 minutes"
        },
        "body": "Javascript bersifat _Dynamic Type_ yang artinya tipe data yang di assign kedalam suatu variabel dapat berubah, beda dengan java atau c yang besifat _Static Type_ yang tipe datanya tak bisa dirubah dan harus menentukan tipe data ketika kita (HAH~?! Kita?) mendeklarasikan suatu variabel. Terkadang hal ini akan membingungkan bagi orang yang awal nya sudah pernah belajar bahasa Java / C / Pascal.\n\n_Jika kalian nyaman dengan static typing, javascript juga memiliki subset bahasa yang bersifat static typing, yaitu [TypeScript](https://www.typescriptlang.org/)._\n\n## Mengapa JavaScript besifat Dynamic Typing?\n\nKarena variabel dalam javascript hanya merujuk pada suatu nilai primitif.\n\nMisal dalam Java ketika variabel yang telah dideklarasikan dengan tipe data integer, di assign dengan nilai dengan tipe data string, maka nilai tersebut akan ditolak dan java akan menyatakan error.\n\nContoh:\n\nMisal nilai variabel `a` adalah bilangan bulat (integer) 100;\n\nDengan menggunakan Java\n\n```java\nint a = 100;\n```\n\nDengan menggunakan JavaScript\n\n```js\nvar a = 100;\n```\n\nTerlihat dalam java variabel a telah ditentukan untuk memiliki nilai integer dengan adanya keyword `int` sebelum nama dari variabelnya, berbeda dengan javascript yang hanya menggunakan keyword `var` yang menandakan scope atau jangkauan dari variabel saja.\n\nVariabel dalam javascript dapat dianggap sebagai relasi. Dari contoh sebelumnya variabel `a` merujuk ke nilai `100`, dan nilai `100` tersebut dapat disebut dengan nilai primitif dalam JavaScript. Sehingga tak ada keterikatan antara tipe data dan nilai yang akan di assign.\n\n## Primitif\n\nSebelumnya dijelaskan bahwa variabel dalam javascript merujuk ke nilai (value) atau primitif, nah yang disebut primitif ini adalah nilai yang tak memiliki atribut, method, dan bersifat `read-only`, jadi nilainya tidak dapat diubah (_immutable_), hanya bisa di assign dengan nilai primitif lain.\n\nBerikut beberapa primitif yang ada di JavaScript:\n\n- `boolean` : berisi nilai antara `true` atau `false`\n- `number` : bilangan dari -(2<sup>53</sup> − 1) sampai 2<sup>53</sup> − 1\n- `bigint` : bilangan lebih dari [nilai bilangan maksimal yang telah ditentukan oleh javacript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER).\n- `string` : berisikan satu atau kumpulan dari karakter.\n- `null` : menandakan data atau variabel bernilai kosong atau `null`.\n- `undefined`: variabel belum memiliki definisi.\n\n### Primitif besifat Immutable\n\nUntuk membuktikan bahwa primitif bersifat _immutable_ atau tak dapat diubah, kita gunakan contoh program ini:\n\n```js\nvar name = 'Hendra Sadewa';\nconsole.log(name);\n\nname[0] = 'R';\nconsole.log(name);\n\nname = 'Firman Hendrad';\nconsole.log(name);\n```\n\nCode diatas akan menghasilkan output seperti ini:\n\n```bash\nHendra Sadewa\nHendra Sadewa\nFirman Hendrad\n['Hendra', 'Annisa', 'Firman']\n[\"Sadewa\", \"Annisa\", \"Firman\"]\n```\n\nTerlihat bila nilai primitive tak dapat diubah dengan perintah `name[0] = 'R';` yang tujuannya adalah untuk mengubah karakter pertama dari string `Hendra Sadewa` yang disimpan dalam variabel `name`. Namun Primitive dapat direplace nilainya dengan nilai baru, hal ini dapat dibuktikan dengan perintah `name = 'Firman Hendrad';` yang menghasilkan teks `Firman Hendrad` ketika variabel `name` dicetak dengan `console.log`.\n\n### Primitif dapat dibandingkan nilainya\n\nKarena menyimpan suatu nilai, primitif dapat di bandingkan nilainya yang akan menghasilkan nilai boolean.\n\n```js\nconst employee1Age = 24;\nconst employee2Age = 24;\n\nconst isSame = employee1Age === employee2Age;\nconsole.log(isSame);\n```\n\npotongan program diatas kan menghasilkan output:\n\n```bash\ntrue\n```\n\nMenyatakan bila nilai dari variable `isSame` yang bernilai perbandingan antara `employee1Age` dan `employee2Age` adalah sama atau bernilai `true`.\n\n## Non-Primitif\n\nNilai yang disimpan oleh variabel yang non-primitif adalah referensi dari suatu object. Nilai non-primitif dapat diubah nilainya, dan nilai nya tak dapat dibandingkan (compare).\n\nBerikut tipe data non-primitif yang umum digunakan di javascript:\n\n- `Array`: kumpulan atau list dari beberapa nilai yang dapat diakses oleh indeksnya.\n- `Object`: nilai yang berisi pasangan dari key dan value dapat diakses oleh key nya.\n\n### Non-Primitif dapat diubah nilainya\n\nUntuk membahas mutability dalam non-primitif mari kita check potongan kode dibawah ini:\n\n```js\nvar names = ['Hendra', 'Annisa', 'Firman'];\nconsole.log(names);\n\nnames[0] = 'Sadewa';\nconsole.log(names);\n\nconst employee = {\n  name: 'Yudi',\n  position: 'Front End Engineer',\n};\n\nemployee.position = 'Fullstack Engineer';\n```\n\nPada tipe non-primitive seperti Array, nilai nya dapat diubah seperti perintah `names[0] = 'Sadewa';` yang akan mengganti nilai pertama atau index pertama dari array `names` dengan teks `Sadewa`, dan nilai atribut `position` didalam object `employee` dapat diganti juga melalui perintah `employee.position = 'Fullstack Engineer';`.\n\n### Non-Primitif tak bisa dibandingkan nilainya\n\nKarena non-primitif menyimpan referensi dari objek, nilainya tak dapat dibandingkan. Mari check code dibawah ini:\n\n```js\nconst employee1 = {\n  name: 'Yudi',\n  position: 'Front End Engineer',\n};\n\nconst employee2 = {\n  name: 'Yudi',\n  position: 'Front End Engineer',\n};\n\nconst isEmployeeSame = employee1 === employee2;\nconsole.log(isEmployeeSame);\n\nconst isNamePositionSame = employee1.position === employee2.position;\nconsole.log(isNamePositionSame);\n\nconst alicePets = ['turtle', 'cat'];\nconst alisonPets = ['turtle', 'cat'];\n\nconst isTheirPetsSame = alicePets === alisonPets;\nconsole.log(isTheirPetsSame);\n\nconst amandaPets = alisonPets;\nconst isAmandaPetsSame = amandaPets === alisonPets;\nconsole.log(isAmandaPetsSame);\n```\n\noutput:\n\n```bash\nfalse\ntrue\nfalse\ntrue\n```\n\nTerbukti bahwa:\n\n1. Nilai dari variabel non primitif yaitu employee1 dan employee2 tak dapat dibandingkan walaupun objeknya sama persis, nilai yang dihasilkan dari komparasi `const isEmployeeSame = employee1 === employee2;` adalah `false`.\n2. Sedangkan nilai attribut object employee yang bernilai primitif dapat dibandingkan yaitu attribut position yang ada di kedua object dengan menggunakan perintah `const isNamePositionSame = employee1.position === employee2.position;` yang akan menghasilkan `true` karena nilainya sama.\n3. Begitu pula dengan Array, hasil dari perbandingan `alicePets === alisonPets;` akan menghasilkan `false, walaupun isi dari keuda variabel itu sama persis.\n4. Variabel non primitif dapat di compare melalui refensi nya, dibuktikan dari nilai `amandaPets` yang di assign dengan variabel `alisonPets`, ketika dibandingkan kedua variabel tersebut `amandaPets === alisonPets;` hasilnya adalah `true`.\n\nSampai disini dulu pembahasan mengenai data types yang ada dalam javascript, untuk detailnya akan dibahas dilain artikel, semoga bermanfaat.\n\nCheers 🥂\n"
      },
      {
        "title": "Tutorial Javascript Dasar | JS101",
        "date": "2020-03-19",
        "description": "Belajar dasar pemrograman javascript dengan pembawaan yang singkat dan santai.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1543966888-7c1dc482a810?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1381&q=80",
          "photographer": "Paul Esch-Laurent",
          "unsplashAccount": "pinjasaur",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Tutorial-Javascript-Dasar-|-JS101",
          "words": 191,
          "sentences": 8,
          "series": "js101",
          "seasonTitle": "intro",
          "season": 0,
          "episode": 1,
          "isPublished": true,
          "timeToRead": "1 minutes"
        },
        "body": "Selamat datang di serial [#JS101](/js101), dalam serial artikel ini gue akan bahas pemrograman javascript dasar. Serial [#JS101](/js101) ini terbagi menjadi beberapa artikel pendek, berisikan satu buah topik terkait dengan pemrograman dengan menggunakan JavaScript.\n\nUntuk mengikuti serial ini, diharapkan kalian sudah install:\n\n- basic programming\n- Node js versi terkini atau LTS [download di nodejs.org ](https://nodejs.org/en/)\n- Code Editor ([Visual Studio Code](https://code.visualstudio.com/) / Sublime / Atom / Nodepad ++ / vim)\n\nOke tanpa basa basi lagi berikut edisi yang tersedia dan yang akan tersedia:\n\n### Introduction\n\n- [Hello World](/js101/introduction/)\n- [Variables and Constants](/js101/introduction/1-variables-constants/)\n- [Data Types (Primitives)](/js101/introduction/2-data-types/)\n\n### Operators\n\n- [Intro to JS Operators](/js101/operators/)\n- [Assignment Operators](/js101/operators/1-assignment-operators/)\n- [Arithmetic Operators](/js101/operators/2-arithmetic-operators/)\n- [Comparison Operators](/js101/operators/3-comparison-operators/)\n- [Logical Operators](/js101/operators/4-logical-operators/)\n- [String Operators](/js101/operators/5-string-operator/)\n- [Ternary Operator](/js101/operators/6-ternary-operator/)\n\n### Basic Functions\n\n- [Functions](/js101/functions/)\n- [Functions dan Arrow Functions](/js101/functions/1-arrow-function/)\n- [Scope of Variables](/js101/functions/2-scope/)\n- [Callback Function](/js101/functions/3-callback)\n\n### Controlling Your Program\n\n- Branching (if-else) [*belum tersedia*]\n- Branching (switch-case) [*belum tersedia*]\n- Looping (for) [*belum tersedia*]\n- Looping (for-in) [*belum tersedia*]\n- Looping (for-of) [*belum tersedia*]\n- Looping (while) [*belum tersedia*]\n\n### Having fun with Array\n\n- Map [*belum tersedia*]\n- For Each [*belum tersedia*]\n- Filter [*belum tersedia*]\n- Reduce [*belum tersedia*]\n\n### Asyncronous Programming\n\n- Callback [*belum tersedia*]\n- Promise [*belum tersedia*]\n- Async function [*belum tersedia*]\n\n### Functional Programming\n\n- Pure Functions [*belum tersedia*]\n- Immutability [*belum tersedia*]\n- Currying [*belum tersedia*]\n\nSemoga gue bisa menyelesaikan seluruh topik ya, amin.\n"
      },
      {
        "title": "Operator dan ekspresi di javascript",
        "date": "2020-03-23",
        "description": "Kumpulan artikel tentang operator untuk mengolah data di javascript.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1573487128671-84e3cea4f78b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=631&q=80",
          "photographer": "Science in HD",
          "unsplashAccount": "scienceinhd",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Operator-dan-ekspresi-di-javascript",
          "words": 171,
          "sentences": 35,
          "series": "js101",
          "seasonTitle": "operators",
          "season": 2,
          "episode": 0,
          "isPublished": true,
          "timeToRead": "1 minutes"
        },
        "body": "Operator digunakan untuk melakukan proses pengolahan data seperti operasi artimatika, perbandingan, penggabungan string, menghapus variabel dan banyak lagi. Karena banyak, section operator akan dibagi seperti list dibawah ini:\n\n# Table of contents\n\n1. [Assignment Operators](/js101/operators/1-assignment-operators/)\n2. [Arithmetic Operators](/js101/operators/2-arithmetic-operators/)\n3. [Comparison Operators](/js101/operators/3-comparison-operators/)\n4. [Logical Operators](/js101/operators/4-logical-operators/)\n5. [String Operators](/js101/operators/5-string-operator/)\n6. [Ternary Operator](/js101/operators/6-ternary-operator/)\n\n# Welcome to the one of Weird Sections in Javascript\n\nSesuai dari heading diatas, disini kalian akan menemukan keajaiban dari operator dalam js yang bikin mindblowon. Mari kita mulai dari primitives:\n\n```js\n1 + 1\n=> 2\n1 - 1\n=> 0\n1 + '1'\n=> 11\n1 - '1'\n=> 0; // wqwqwqqwqwqwq~\n\n1 == 1\n=> true\n1 == '1'\n=> true // wqwqwqwqwqqq~\n1 === '1'\n=> false;\n0.1 + 0.1 == 0.2\n=> true\n0.1 + 0.2 == 0.3\n=> false // WQWQWQQWQWQWQWQWWQWQWQ~~~~~\n0.1 + 0.4 == 0.4\n=> true // WQWQWQQWQWQWQWQWWQWQWQ~~~~~\n```\n\n![wqwqwqwqwqwq](https://media.giphy.com/media/jUhJJpzQHYQZvwFlWC/giphy.gif)\nWQWQWQWQWQWQ~\n\n```js\n0.1 + 0.1 == 0.2\n=> true\n0.1 + 0.2 == 0.3\n=> false // WQWQWQQWQWQWQWQWWQWQWQ~~~~~\n0.1 + 0.4 == 0.4\n=> true // WQWQWQQWQWQWQWQWWQWQWQ~~~~~\n```\n\n![ada njir bahasa kek gini](https://media.giphy.com/media/Z9OGuQyrfHAE8/giphy.gif)\nADA JUGA YHA BAHASA KEK GINI, TERUS BANYAK YANG MAKE LAGI WQWQWQWQWWQWQWQWQWQWQ~~~~~~\n\nUdah udah, Gimana? aneh? penasaran kenapa bisa begitu?\nSelengkapnya akan dibahas tuntas di section operator ini. Jadi keep in touch aja ya.\n\nCheers 🥂\n"
      },
      {
        "title": "Operator assignment di Javascript",
        "date": "2020-03-25",
        "description": "Operator untuk mengisi nilai variabel, beserta teknik seperti destructuring variabel dari suatu object atau array.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1499750310107-5fef28a66643?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=750&q=80",
          "photographer": "Andrew Neel",
          "unsplashAccount": "andrewtneel",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Operator-assignment-di-Javascript",
          "words": 515,
          "sentences": 32,
          "series": "js101",
          "seasonTitle": "operators",
          "season": 2,
          "episode": 1,
          "isPublished": true,
          "timeToRead": "3 minutes"
        },
        "body": "## Operator assignment\n\nOperator ini digunakan untuk memberi nilai pada suatu variabel / constants, operator ini disimbolkan dengan sama dengan `=`. Cara penggunaannya adalah sebagai berikut:\n\n```js\nlet variabel;\nconsole.log(variabel); // undefined\n\nvariabel = 1;\nconsole.log(variabel); // 1\n\nconst konstanta = 'SATU';\nconsole.log(konstanta); // 'SATU'\n```\n\n## Destructure\n\nSelain untuk mengisi nilai variabel, operator ini berguna pula untuk men-destruktur nilai dari suatu object atau array. Mari kita praktekan (HAH~!, QITA?) dengan beberapa code berikut:\n\n#### Tanpa menggunakan desctructure assignment\n\n```js\nconst makanan = ['siomay', 'bakso', 'nasi ayam bawang'];\nconst siomay = makanan[0];\nconst bakso = makanan[1];\n\nconsole.log(siomay, bakso);\n```\n\n## Mix Assignment with other operators\n\nOperator assignment juga dapat dicampur dengan operator lainnya, sehinggan memudahkan untuk melakukan operasi yang membutuhkan nilai sebelumnya yang kemudian nilainya akan langsung disimpan.\n\n```js\nlet harga = 1000;\n\nharga += 1000; // harga + 1000\nconsole.log('harga += 1000', harga);\n\nharga -= 1000; // harga - 1000\nconsole.log('harga -= 1000', harga);\n\nharga *= 2; // harga * 2\nconsole.log('harga *= 2', harga);\n\nharga /= 2; // harga / 2\nconsole.log('harga /= 2', harga);\n```\n\nOutput:\n\n```js\nharga += 1000 = 2000;\nharga -= 1000 = 1000;\nharga *= 2 = 2000;\nharga /= 2 = 1000;\n```\n\nSederhananya, seperti ini:\n\n- `harga = 1000`: harga didefinisikan sebesar 1000.\n\n- `harga += 1000` atau seperti ini `harga = harga + 1000`: harga akan diisi dengan harga sebelumnnya kemudian ditambahkan dengan 1000.\n\n#### Dengan menggunakan descturcture\n\n```js\nconst makanan = ['siomay', 'bakso', 'nasi ayam bawang'];\nconst [siomay, bakso] = makanan;\n\nconsole.log(siomay, bakso);\n```\n\nkedua code diatas akan menghasilkan:\n\n```js\nsiomay bakso\n```\n\nMengapa bisa begitu?\n\nMari kita ingat-ingat jika array [adalah kumpulan nilai yang bisa diakses nilainya melalui index](/js101/introduction/2-data-types/), nah di code pertama dapat terliat ada assignment untuk mengisi nilai variabel siomay dengan nilai dari makanan dengan index nol (0), `const siomay = makanan[0];`, dan akan mencetak `'siomay'` jika variabel siomay dipanggil. Sama seperti statement assignment `const [siomay, bakso] = makanan;` yang merepresentasikan index dari array dengan menggunakan **posisinya**. Variabel `siomay` di code kedua akan diisi dengan nilai dari index pertama dari array `makanan` karena `siomay` menempati posisi awal, dan `bakso` akan diisi dengan nilai dari index kedua variabel array `makanan`.\n\nMari lanjut ke contoh yang sedikit lebih kompleks:\n\n```js\nconst makanan = [\n  {\n    harga: 18000,\n    nama: 'siomay',\n  },\n  {\n    harga: 14500,\n    nama: 'bakso',\n  },\n  {\n    harga: 24000,\n    nama: 'Nasi Ayam bawang',\n  },\n];\n\nconst [siomay, baso] = makanan;\n\nconsole.log(siomay.nama, siomay.harga);\nconsole.log(baso.nama, baso.harga);\n```\n\nketika dijalankan akan menghasilkan output sebagai berikut:\n\n```js\nsiomay 18000\nbakso 14500\n```\n\nmengapa bisa begitu?\n\nSama seperti contoh code pertama. Karena variabel makanan berisikan array yang terdiri dari object makanan yang memiliki attribut `harga` dan `nama`, sehingga dapat di 'destructure' menjadi tuple `[siomay, baso]`, `siomay` menjadi variabel yang akan terisi nilai dari index pertama variabel makanan: `{harga: 18000, nama: 'siomay'}`, dan `bakso` dari index kedua.\n\nSelain array, object juga dapat didesctructure. Bedanya object didestructure dengan menggunakan `key`. mari kita praktekkan dengan code berikut:\n\n```js\nconst NASI_AYAM_BAWANG = {\n    harga: 24000,\n    nama: 'Nasi Ayam bawang',\n  },\n\nconst { nama, harga } = NASI_AYAM_BAWANG;\n\nconsole.log(nama, harga);\n```\n\nDapat diperhatikan ketika destructure terjadi, kita menggunakan key `nama`, dan `harga` tanpa mempedulikan posisinya. Sehingga ketika dijalankan akan menghasilkan output sebagai berikut:\n\n```js\nNasi Ayam Bawang 24000\n```\n\nSudah cukup mungkin ya untuk bahas operator assignment di javascript, jika ada yang mau ditanyakan silahkan mensyen gue di twitter [@sadevva\\_](https://twitter.com/sadevva_).\n\nCheers 🥂\n"
      },
      {
        "title": "Operator Aritmatika di Javascript",
        "date": "2020-03-26",
        "description": "Tutorial menggunakan operator aritmatika dalam javascript untuk mengolah data numeric.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1509228627152-72ae9ae6848d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "Antoine Dautry",
          "unsplashAccount": "antoine1003",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Operator-Aritmatika-di-Javascript",
          "words": 464,
          "sentences": 24,
          "series": "js101",
          "seasonTitle": "operators",
          "season": 1,
          "episode": 2,
          "isPublished": true,
          "timeToRead": "2 minutes"
        },
        "body": "## Operator Aritmatika\n\n[Diartikel sebelumnya](/js101/operators/1-assignment-operators/) sudah ada beberapa operator aritmatika yang digunakan, mari bahas lebih dalam.\n\nMari check tabel yang berisi operator aritmatika yang ada dalam javascript berikut:\n\n| Operator | Description          |\n| :------- | :------------------- |\n| +        | Tambah               |\n| -        | Kurang               |\n| \\*       | Kali                 |\n| \\*\\*     | Pangkat (ES6)        |\n| /        | Bagi                 |\n| %        | Modulus (Sisa Bagi)  |\n| ++       | Increment ( plus 1)  |\n| --       | Decrement ( minus 1) |\n\nBerikut contoh code yang disertai operasi aritmatik, mari copas potongan code dibawah terus save dengan nama file `arit.js`.\n\n```js\n// arit.js\nlet hasil = 0;\n\nhasil = 4 + 2;\nconsole.log('4 + 2 =', hasil);\n\nhasil = 4 - 2;\nconsole.log('4 - 2 =', hasil);\n\nhasil = 4 * 2;\nconsole.log('4 * 2 =', hasil);\n\nhasil = 4 ** 2;\nconsole.log('4 ** 2 =', hasil);\n\nhasil = 4 / 2;\nconsole.log('4 / 2 =', hasil);\n\nhasil = 4 % 2;\nconsole.log('4 % 2 =', hasil);\n```\n\nJika dirunning dengan perintah `node arit.js`, maka akan menghasilkan output:\n\n```bash\n4 + 2 = 6\n4 - 2 = 2\n4 * 2 = 8\n4 ** 2 = 16\n4 / 2 = 2\n4 % 2 = 0\n```\n\noke, normal ya, sesuai dengan ekspektasi, sekarang kita coba dua operator terakhir, yaitu increment `++` dan decrement `--`. Coba replace isi dari file `Operatorsarit.js` dengan code dibawah ini:\n\n```js\nlet hasil = 0;\n\nhasil = 4++;\nconsole.log('4++ =', hasil);\n\nhasil = 4--;\nconsole.log('4-- =', hasil);\n```\n\nJika dirunning dengan perintah `node arit.js`, maka akan menghasilkan output:\n\n```js\nhasil = 4++;\n        ^\nSyntaxError: Invalid left-hand side expression in postfix operation\n```\n\nError yha~, karena nilai `4` adalah nilai _primitive_, dan primitive bersifat _imuttable_, jadi operator increment atau decrement tak bisa secara langsung digunakan, karena kedua operator ini bersifat mengubah nilai dari `4`. Sehingga kita harus assign terlebih dahulu nilai `4` kedalam variabel.\n\n```js\nlet hasil = 0;\n\nhasil = 4;\nhasil++;\nconsole.log('4++ =', hasil);\n\nhasil = 4;\nhasil--;\nconsole.log('4-- =', hasil);\n```\n\nOutput:\n\n```js\n4++ = 5;\n4-- = 3;\n```\n\nnah, sekarang sudah berjalan sesuai dengan ekspektasi, karena operator increment dan decrement memiliki variabel. Hayo yang belum paham mengenai tipe data dan primitive di javascript bisa baca [artikel ini terlebih dahulu](/js101/introduction/2-data-types/)).\n\nJadi sekarang sudah bisa ya bikin kalkulator pakai javascript, hehehe.\n\nCheers 🥂\n"
      },
      {
        "title": "Operator perbandingan di Javascript",
        "date": "2020-04-10",
        "description": "Cocoklah untuk yang bingung dengan penggunaan statement yang butuh kondisi seperti looping, dan branching.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1560864495-a6bd2a912ca7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1258&q=80",
          "photographer": "Coffee Geek",
          "unsplashAccount": "coffeegeek",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Operator-perbandingan-di-Javascript",
          "words": 588,
          "sentences": 27,
          "series": "js101",
          "seasonTitle": "operators",
          "season": 2,
          "episode": 3,
          "isPublished": true,
          "timeToRead": "3 minutes"
        },
        "body": "# Operator persamaan ( == / === )\n\nDi js, untuk membandingkan nilai antara dua buah primitive atau variabel dapat dilakukan dengan menggunakan operator persamaan. Operator persmaan dalam javascript terbagi menjadi dua, yaitu persamaan berdasarkan nilai atau _equality_ (==), dan persamaan berdasarkan nilai dan tipe nya atau _strict equality_ (===).\n\nContoh penggunaan:\n\n```js\n1 == 1; // true\n1 === 1; // true\n1 == '1'; // true\n1 === '1'; // false\n```\n\nPerlu diperhatikan saat membandingkan nilai dengan operator persamaan, jika ekspektasi dari nilai yang akan dibandingkan adalah sama dan tipenya pun juga sama, gunakanlah selalu operator persamaan _strict equality_, karena selain membandingkan nilai, tipe nya pun akan dicheck, contoh pada `1 === '1'` akan menghasilkan `false`, karena nilainya benar sama, namun tipenya berbeda, yaitu `number` dan `string`.\n\n# Operator pertidaksamaan ( != / !== )\n\nSelain persamaan, terdapat juga operator untuk check pertidaksamaan antar nilai atau variabel, sama dengan operator persamaan, operator ini pun juga memiliki _strict inequality_ operator dengan menggunakan (`!==`).\n\nContoh penggunaan:\n\n```js\n1 != 1; // false\n1 !== 1; // false\n1 != '1'; // false\n1 !== '1'; // true\n```\n\n# Operator relasional ( > , <, >=, <= )\n\nOperator ini digunakan untuk membandingkan dua nilai numerik.\n\nTerdiri dari beberapa operator:\n\n| Symbol | Deskripsi                    |\n| ------ | ---------------------------- |\n| >      | lebih dari                   |\n| <      | kurang dari                  |\n| >=     | lebih dari atau sama dengan  |\n| <=     | kurang dari atau sama dengan |\n\nContoh Penggunaan:\n\n```js\n1 > 1; // false\n1 >= 1; // true\n1 < 1; // false\n1 <= 1; // true\n\n1 > 2; // false\n1 >= 2; // false\n1 < 2; // true\n1 <= 2; // true\n```\n\nDalam operator relational, hanya nilai saja yang dibandingkan, tak ada operator _strict_ yang dapat membandingkan nilai dan tipe.\n\n# Special Case, Null & Undefined\n\nMembandingkan `null` dan `undefined` dengan operator persamaan.\n\n```js\nnull === undefined; // false\nnull == undefined; // true\n\nnull !== undefined; // true\nnull != undefined; // false\n```\n\nTerdapat aturan khusus dimana kedua nilai yang bersifat _falsy_ ini jika dibandingkan dengan persamaan _non strict equality_ akan bernilai true, sementara dengan operator _strict equality_ akan bersifat false, karena null dan undefined memiliki tipe yang berbeda.\n\nMembandingkan `null` dengan nilai 0 menggunakan operator relational.\n\n```js\nnull > 0; // false\nnull >= 0; // true\nnull < 0; // false\nnull <= 0; // true\n```\n\nKetika terdapat operator relational, `null` akan dikonversi kedalam nilai numerik, yaitu 0, berikut adalah code untuk membuktikannya:\n\n```js\nnull > -1; // true\nnull >= 0; // true\nnull <= 0; // true\nnull < 1; // true\n```\n\nMembandingkan `undefined` dengan nilai 0 menggunakan operator relational.\n\n```js\nundefined > 0; // false\nundefined >= 0; // false\nundefined < 0; // false\nundefined <= 0; // false\n```\n\nBerbeda dengan `null`, `undefined` akan dikonversikan kedalam `NaN`, nilai `NaN` akan selalu menghasilkan `false` jika di bandingkan dengan bilangan lain. sehingga akan selalu menghasilkan nilai `false` seperti kode diatas.\n\n# Weird Case 0.1 + 0.2 === 0.3 returns false!\n\nKasus ini banyak terjadi, cukup aneh memang, penjelasan singkat mengapa kode `0.1 + 0.2 === 0.3` menghasilkan `false` karena `0.1 + 0.2` tidak akan menghasilkan bilangan `0.3` melainkan bilangan `0.30000000000000004`. Ini terjadi karena javascript selalu menyimpan data numerik dengan tipe data double precision float. Penjelasan lengkap dapat di lihat di [artikel medium ini](https://medium.com/better-programming/why-is-0-1-0-2-not-equal-to-0-3-in-most-programming-languages-99432310d476).\n\nOkay, sekarang sudah siap untuk bikin kondisi buat branching dan looping nih,\n\nCheers 🥂\n"
      },
      {
        "title": "Operator logika di Javascript",
        "date": "2020-04-11",
        "description": "Biasanya sih buat combine dua buah operasi yang menghasilkan nilai boolean.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1534224039826-c7a0eda0e6b3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80",
          "photographer": "israel palacio",
          "unsplashAccount": "othentikisra",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Operator-logika-di-Javascript",
          "words": 379,
          "sentences": 12,
          "series": "js101",
          "seasonTitle": "operators",
          "season": 2,
          "episode": 4,
          "isPublished": true,
          "timeToRead": "2 minutes"
        },
        "body": "Logical operator biasanya sih buat combine dua buah operasi yang menghasilkan nilai boolean, dan akan menghasilkan nilai boolean juga. Cara kerja dari operator ini seperti gerbang logika, sesuai dengan gerbang logika, operator ini terdiri dari:\n\n| Symbol | Deskripsi     |\n| ------ | ------------- |\n| &&     | AND           |\n| \\|\\|   | OR            |\n| !      | NOT (inverse) |\n\nContoh:\n\n```js\n10 > 5 && 5 > 2; // true\n10 > 5 && 4 < 2; // false\n8 === 2 && 4 < 2; // false\n```\n\nOperator AND hanya akan menghasilkan `true` bila kedua nilai yang dibandingkan adalah bernilai `true`.\n\n```js\n10 > 5 || 5 > 2; // true\n10 > 5 || 4 < 2; // true\n8 === 2 || 4 < 2; // false\n```\n\nOperator OR akan menghasilkan `true` bila salah satu atau kedua nilai yang dibandingkan adalah bernilai `true`.\n\n```js\n!(10 > 5 || 5 > 2); // false\n!(10 > 5 || 4 < 2); // false\n!(8 === 2 || 4 < 2); // true\n\n!(10 > 5 || 5 > 2); // false\n!(10 > 5 || 4 < 2); // true\n!(8 === 2 || 4 < 2); // true\n```\n\nOperator NOT akan menghasilkan kebalikan (inverse) dari nilai boolean yang dihasilkan.\n\n### Short-Circuit\n\nSelain digunakan untuk melakukan perbandingan antar dua ekspresi boolean, operator AND `&&` dan OR `||`, dapat digunakan juga untuk melakukan evaluasi sebelum menjalankan statement selanjutnya, maksudnya gimana sih?\n\nContoh, kita akan menjalankan (HAH~!?, KITA?!) statement 'selamat anda cukup umur untuk masuk' jika nilai variabel `age` adalah diatas 18 tahun.\n\n```js\nconst MIN_AGE = 18;\n\nlet age = 21;\nconsole.log(age >= MIN_AGE && 'selamat anda cukup umur untuk masuk');\n```\n\nDari code diatas, output yang akan dihasilkan adalah 'selamat anda cukup umur untuk masuk', karena nilai `age` adalah 21, jika nilai `age` diganti dengan 16 maka tidak akan mencetak message.\n\nintinya jika statement evaluasi bernilai `true`, maka akan lanjut ke statement selanjutnya.\n\nsementara, bila kode tadi diganti menjadi seperti ini:\n\n```js\nconst MIN_AGE = 18;\n\nlet age = 21;\nconsole.log(age >= MIN_AGE || 'selamat anda cukup umur untuk masuk');\n```\n\nConsole Akan mencetak `true`, karena nilai yang dihasilkan oleh `age >= MIN_AGE` adalah `true`. Karena OR akan langsung mengabaikan statement selanjutnya, dan akan mengambil nilai dari statement evaluasi.\n\nCheers 🥂\n"
      },
      {
        "title": "Operator untuk mengolah string di javascript",
        "date": "2020-04-12",
        "description": "Berguna untuk yang mau gabungin dua buah string dengan mudah.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1535587566541-97121a128dc5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "Caio Silva",
          "unsplashAccount": "caiohenriquesilva",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Operator-untuk-mengolah-string-di-javascript",
          "words": 180,
          "sentences": 14,
          "series": "js101",
          "seasonTitle": "operators",
          "season": 2,
          "episode": 5,
          "isPublished": true,
          "timeToRead": "1 minutes"
        },
        "body": "Sebenarnya sih, operator string ini hanya terdiri dari operasi concat saja, dengan menggunakan plus `+` diantara kedua string seperti ini:\n\n```js\nconst text = 'lorem' + 'ipsum';\nconsole.log(text);\n```\n\ndari code diatas akan menghasilkan output:\n\n```\nloremipsum\n```\n\nuntuk mempermudah lagi dalam penyisipan variabel, dalam ES6 terdapat string yang diapit oleh tilde (\\`) yang memungkinkan untuk menyisipkan nilai kedalam suatu text yang diapit oleh tilde.\n\ncontoh:\n\n```js\nconst firstName = 'hendra';\nconst lastName = 'sadewa';\nconst age = 18;\n\nconsole.log(`My name is ${firstName} ${lastName}, I'm ${age} years old`);\n```\n\njika di running akan mencetak text seperti ini:\n\n```\nMy name is hendra sadewa, I'm 18 years old\n```\n\n### Weird Case: string plus number\n\noke kasus wqwqwqwq nya begini:\n\n```js\nconsole.log(1 + 1);\nconsole.log(1 + '1');\nconsole.log(1 - 1);\nconsole.log(1 - '1');\n```\n\nnah, jika di running akan menghasilkan:\n\n```\n2\n11\n0\n0\n```\n\nwhyyy, `1+'1'` menghasilkan `11` tapi kenapa `1-'1'` jadinya `0`?\n\nKarena operator `+` cukup ambigu, dapat digunakan operasi concat (menyambung string) dan juga pertambahan. Sementara operator minus `-` hanya digunakan untuk operasi pengurangan saja, sehingga dalam operasi pengurangan menggunakan string, string yang berisi number akan diconvert menjadi `number`\n\ncontoh:\n\n```js\nconsole.log('100' - '50');\nconsole.log('100' - 50);\nconsole.log(100 - '50');\n```\n\ntentu ketiga statement itu akan menghasilkan `50`.\n\n```\n  50\n  50\n  50\n```\n\nwqwqwqwqwqwq aneeeh aneeeh, yasudalah ya udahan dulu.\n\nCheers 🥂\n"
      },
      {
        "title": "Kenalan dengan ternary operator",
        "date": "2020-04-13",
        "description": "Buat yang males pake if - else",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1533073526757-2c8ca1df9f1c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80",
          "photographer": "Javier Allegue Barros",
          "unsplashAccount": "soymeraki",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Kenalan-dengan-ternary-operator",
          "words": 415,
          "sentences": 21,
          "series": "js101",
          "seasonTitle": "operators",
          "season": 2,
          "episode": 6,
          "isPublished": true,
          "timeToRead": "2 minutes"
        },
        "body": "Mungkin Anda adalah insan yang terlahir malas sekali untuk menulis statement percabangan `if - else` di muka bumi ini. Selamat, Anda terselamatkan dengan adanya operator ternary ini.\n\nCara penulisannya seperti ini:\n\n```js\n  kondisi\n    ? statement yang dijalankan jika kondisi bernilai true\n    : statement yang dijalankan jika kondisi bernilai false\n```\n\nSimple sekali bukan? daripada ngetik `if-else`. Mari kita coba (HAH! [udah bang udah]) coba praktekan dengan kasus seperti ini:\n\n### Kasus\n\nUntuk memasuki situs abc-tube, umur harus 18 tahun keatas, jika kurang maka akan ditolak dengan menampilkan message penolakan karena belum cukup umur.\n\n### Solusi\n\nIntinya jika lebih atau sama dengan dari 18 tahun atau `UMUR >= 18`. Jika lolos kondisi ini maka cetak `'Silahkan masuk'`, jika tidak maka cetak `'Anda belum cukup umur'`.\n\n#### Code\n\njika menggunakan `if - else`\n\n```js\nconst UMUR = 16;\n\nlet message = '';\n\nif (UMUR >= 18) {\n  message = 'Silahkan masuk';\n} else {\n  message = 'Anda belum cukup umur';\n}\n```\n\nJika menggunakan ternary `? :`\n\n```js\nconst UMUR = 16;\nconst message = UMUR >= 18 ? 'Silahkan masuk' : 'Anda belum cukup umur';\nconsole.log(message);\n```\n\nKedua code diatas akan mencetak `Anda belum cukup umur` karena nilai variabel `UMUR` adalah 16, tida sesuai dengan kondisi yang diberikan yaitu `UMUR >= 18`.\n\nMemang menghasilkan output yang sama, namun ternary memiliki penulisan yang lebih singkat dibanding `if-else`. Memang lebih singkat, tapi untuk orang yang belum ~~baca artikel ini mana ngerti wqwqwq~~ memahami maksud dari operator ini akan sedikit bingung, ~~yaelah sama kek if else di excel si~~ jadi dalam penulisan memang lebih jelas untuk dibaca tetaplah `if-else`.\n\n### Kapan sih Saat yang Tepat untuk Menggunakan Ternary?\n\nSebenarnya sih kapan aja bisa ya, tapi lebih tepat adalah ketika membutuhkan value yang harus diisi kedalam suatu variabel contoh seperti kasus sebelumnya. Namun bila hanya untuk memanggil suatu fungsi yang tak mereturn value, ternary dirasa kurang tepat karena kurang jelas untuk dibaca.\n\nMari bandingkan kedua code dibawah:\n\n```js\nconst isLoggedIn = false;\nconst age = 18;\n\nif (age >= 18) {\n  if (isLoggedIn) {\n    console.log('anda sudah login');\n  } else {\n    console.log('anda belum login');\n  }\n} else {\n  console.log('anda belum cukup umur');\n}\n```\n\n```js\nconst isLoggedIn = false;\nconst age = 18;\n\nage >= 18\n  ? isLoggedIn\n    ? console.log('anda sudah login')\n    : console.log('anda belum login')\n  : console.log('anda belum cukup umur');\n```\n\nKedua nya akan menghasilkan output yang sama yaitu `anda belum login`, namun pada code yang menggunakan if-else terlihat jelas flow program, sedangkan dengan menggunakan ternary akan sedikit sulit untuk memahami nya.\n\njadi, sudah ngerti ya soal operator yang cukup asik ini, semoga membantu.\n\nCheers 🥂\n"
      }
    ]
  },
  {
    "howto": [
      {
        "title": "Cara Setting DNS Over HTTPS (DoH) di HP Android 10",
        "date": "2020-03-21",
        "description": "Setting DoH di handphone Android 10 (WiFi only) dengan menggunakan DNS Cloudflare 1.1.1.1",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1491&q=80",
          "photographer": "Taylor Vick",
          "unsplashAccount": "tvick",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Cara-Setting-DNS-Over-HTTPS-(DoH)-di-HP-Android-10",
          "words": 214,
          "sentences": 35,
          "series": "howto",
          "seasonTitle": "internet",
          "season": 1,
          "episode": 2,
          "isPublished": true,
          "timeToRead": "1 minutes"
        },
        "body": "Pernahkah kalian sedang ada bug di production dan sedang research dan menemukan calon solusi dari permasalahan kalian namun solusi tersebut terletak di reddit, dan pas kalian buka ternyata di block oleh ~~first-indi-net~~ provider internet kesayangan kalian.\n\n![kezel bang](https://media.giphy.com/media/DOdsiolqbxCbm/giphy.gif).\n\n_kzl 💢_\n\nDaripada kesel terus dengan kerjaan kemkominfo yang tukang blokir situs yang padahal situsnya berguna, hayuk kita coba gunain teknik DoH. DoH memungkinkan kita (hah!? kita), untuk akses DNS via Https, selain berguna untuk membuka [reddit](https://reddit.com), DoH juga dapat mencegah adanya serangan Man-in-the-Middle. Oiya, DoH membutuhkan DNS selain default dns, untuk saat ini, mari kita gunakan DNS milik [cloudflare](https://1.1.1.1/).\n\n~~COPAS DARI ARTIKEL SEBELUMNYA Y BANG!? wqwqwqwq~~\n\nUntuk device yang dipakai adalah device Android 10 (Nokia 6.1 plus ), untuk device dan versi android lainnya mungkin berbeda, namun apa salahnya dicoba ~🎵\n\nMari ikuti langkah berikut:\n\n1. Buka `Settings`\n\n2. Pilih kategori `Network & Internet`.\n\n3. Expand kategori `Advanced` dan pilih `Private DNS`\n\n4. Pilih `Private DNS provider hostname`\n\n5. Masukan `1dot1dot1dot1.cloudflare-dns.com`\n\n6. Lalu pilih `Save`\n\n7. Matikan dan nyalakan kembali jarignan WiFi di device anda, dan open situs yang kalian inginkan.\n\nSemoga artikel ini dapat membantu kalian.\n\n![yeah](https://media.giphy.com/media/tyxovVLbfZdok/giphy.gif)\n\nCheers 🥂, selamat sekarang sudah bisa buka [reddit](https://reddit.com), mari kita buka [4chan](https://4chan.org/g).\n\n~~COPAS LAGI?! wqwqwqwq~~\n\neiya, kalo semisal kalian ada yang bisa gunakan langkah langkah tadi di versi android lain (misal 9 atau bahkan 8.1) kindly dm me ya atau mention saja di [twitter](https://twitter.com/sadevva_), thanks.\n"
      },
      {
        "title": "Cara Setting DNS Over HTTPS (DoH) Firefox",
        "date": "2020-03-20",
        "description": "Setting DoH di firefox dengan menggunakan DNS Cloudflare 1.1.1.1, EZ~",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1512428559087-560fa5ceab42?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=400&q=60",
          "photographer": "NordWood Themes",
          "unsplashAccount": "nordwood",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Cara-Setting-DNS-Over-HTTPS-(DoH)-Firefox",
          "words": 200,
          "sentences": 36,
          "series": "howto",
          "seasonTitle": "internet",
          "season": 1,
          "episode": 1,
          "isPublished": true,
          "timeToRead": "1 minutes"
        },
        "body": "Pernahkah kalian sedang ada bug di production dan sedang research dan menemukan calon solusi dari permasalahan kalian namun solusi tersebut terletak di reddit, dan pas kalian buka ternyata di block oleh ~~first-indi-net~~ provider internet kesayangan kalian.\n\n![kezel bang](https://media.giphy.com/media/DOdsiolqbxCbm/giphy.gif).\n\n_kzl 💢_\n\nDaripada kesel terus dengan kerjaan kemkominfo yang tukang blokir situs yang padahal situsnya berguna, hayuk kita coba gunain teknik DoH. DoH memungkinkan kita (hah!? kita), untuk akses DNS via Https, selain berguna untuk membuka [reddit](https://reddit.com), DoH juga dapat mencegah adanya serangan Man-in-the-Middle. Oiya, DoH membutuhkan DNS selain default dns, untuk saat ini, mari kita gunakan DNS milik [cloudflare](https://1.1.1.1/).\n\nUntuk setting DoH di firefox, ikuti langkah berikut:\n\n1. Buka Web Browser Firefox.\n\n2. Klik hamburger menu, dan pilih preferences, atau cara cepat nya ketik `about:preferences` di search bar dan tekan `ENTER`.\n\n3. Find dengan keyword `DNS` di search bar, atau scoll ke bagian paling bawah sampai menemukan kategori `Network Settings`.\n\n4. Hasil pencarian akan menampilkan kategori `Network Settings`, lalu klik button `Settings...`.\n\n5. Setelah muncul pop-up connection settings, pada bagian paling bawah, klik checkbox dengan label `Enable DNS over HTTPS`.\n\n6. Pada bagian `Use Provider` pilih `Cloudflare (Default)` lalu tekan button `OK`.\n\n7. Restart firefox, dan open situs yang kalian inginkan.\n\n![yeah](https://media.giphy.com/media/tyxovVLbfZdok/giphy.gif)\n\nCheers 🥂, selamat sekarang sudah bisa buka [reddit](https://reddit.com), mari kita buka [4chan](https://4chan.org/g).\n"
      },
      {
        "title": "Setup Development Environment di WSL",
        "date": "2020-06-05",
        "description": "Pindah ke Windows, tapi biasa pake ubuntu? Coba baca ini deh biar bisa running ubuntu di Windows tanpa VM atau docker.",
        "heroImage": {
          "src": "https://images.unsplash.com/photo-1522199755839-a2bacb67c546?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1352&q=80",
          "photographer": "Anete Lūsiņa",
          "unsplashAccount": "anete_lusina",
          "source": "unsplash"
        },
        "meta": {
          "slug": "Setup-Development-Environment-di-WSL",
          "words": 975,
          "sentences": 128,
          "series": "howto",
          "seasonTitle": "OS",
          "season": 1,
          "episode": 3,
          "isPublished": true,
          "timeToRead": "5 minutes"
        },
        "body": "Minggu ini gue belajar hal baru, hal diluar kebiasaan gue, ya sekarang gue sedang menggunakan Windows 10 sebagai daily driver gue.\n\n## Windows 10?\n\nGue sudah menggunakan Linux sejak jaman gue kuliah, (with serious distro-hopping tho). Ngga pernah kepikiran lagi untuk menggunakan windows sebagai daily driver gue, dikarenakan gue berasa kesulitan untuk config segala kebutuhan development gue, ngga ada package manager, terminal ( cmd ) nya aneh, dan semua config biasanya based on GUI. (Iye, i tau soal [chocolatey](https://chocolatey.org/) pernah coba juga, tapi gue merasa aneh nge-gunainnya 💀).\n\nKarena tempat kerja gue yang sekarang memodalkan gue laptop dengan pre-installed Windows 10, dan gue malas banget install semuanya lagi, soalnya bulan ini gue beberapa kali install ulang laptop untuk menyesuaikan development environment ( tapi ya gitu bosen, oprek lagi), dan Alhamdulillah ya [Microsoft](https://www.linkedin.com/company/microsoft/) telah rilis [Windows terminal](https://devblogs.microsoft.com/commandline/introducing-windows-terminal/) dan juga [WSL](https://docs.microsoft.com/en-us/windows/wsl/install-win10). 🎉 I jadi memutuskan untuk coba WSL (dengan ubuntu 20.04) didalam windows terminal sebagai development environment.\n\n_WSL Apasih ngab?_\n\nWSL / Windows Subsystem for Linux, adalah sebuah fitur di windows 10 yang memungkinan running linux shell di windows 10 tanpa perlu install linux ke disk storage. WSL itu lightweight 🛩️ dan hanya shell / terminal aja tanpa GUI.\n\n_Masalah nggatuh bang? Lancar ngga tuh buat kerja?_\n\nSampai sekarang sih ngga ada masalah, bahkan gue merasa kalo WSL bener-bener melakukan kerja yang bagus untuk integrasi W10 dengan linux. Proyek [Storybook](https://storybook.js.org/) gue jalan lancar dan gue bisa ngoding langsung dengan [VSCode](https://code.visualstudio.com/) tanpa perlu config lagi. Ya walaupun begitu gue juga mengalami \"cegukan\", tapi mudah-mudahan bukan pertanda hal buruk terjadi. Tapi emang gue make nya aja yang kelewatan sih hehehe. 😅\n\n## Mengaktifkan WSL\n\nSebenernya WSL sudah ada didalam fitur windows 10, tinggal kita aktifkan aja, tapi sebelum aktifin WSL, gue kasih tau OS yang gue pake ya:\n\n```\nEdition:\t\tWindows 10 Home Single Language\nVersion:\t\t1909\nInstalled On:\t09/03/2020\nOS Build:\t\t18363.836\n```\n\nSip, semoga di versi lain juga sama ya stepnya.\n\nPertama, tekan start atau search keyword ini:\n\n```\nWindows Features\n```\n\nNanti akan muncul:\n\n```\nTurn Windows Features On or Off\n```\n\npilih opsi tersebut kemudian akan muncul dialog seperti ini:\n\n![cloudinary](https://res.cloudinary.com/hendrasadewa/image/upload/v1591356042/windows_features_dialog_pplt0p.png)\n\nCari fitur bernama `Windows Subsystem for Linux`, kemudian check fitur tersebut untuk mengaktifkannya.\n\nAtau ngga bisa dengan menggunakan command line:\n\n```\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n```\n\nLanjut restart pc / laptopnya.\n\nKetika sudah menyala kembali, kuy buka Windows Store, dan search distro linux yang disukai (Disini gue pakai Ubuntu 20.04). Kemudian install dan tunggu hingga selesai:\n\n![microsoft store, ubuntu](https://res.cloudinary.com/hendrasadewa/image/upload/v1591356425/ms_store_ubuntu_avkiwt.png)\n\nOkay, untuk WSL sudah diaktifkan sekarang tinggal coba running di command prompt\n\ndengan cara running perintah `wsl`.\n\n![wsl di cmd](https://res.cloudinary.com/hendrasadewa/image/upload/v1591356591/wsl_on_cmd_znkxga.png)\n\nokeh done ya, oiya tampilan terminal gue kek gitu karena udah di replace dengan [zsh](https://en.wikipedia.org/wiki/Z_shell) + [oh-my-zsh](https://ohmyz.sh/).\n\n## Windows Terminal\n\nBosen kan pake cmd, sekaran windows udah punya Windows terminal, silahkan download disini [official windows terminal download in microsoft store](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab).\n\nKalo udah, tinggal launch dan pilih drop down menu, klik console yang diinginkan:\n\n![windows terminal](https://res.cloudinary.com/hendrasadewa/image/upload/v1591356986/w_terminl_withh_ubuntu_lbfpac.png)\n\nnanti akan muncul shell seperti terminal ubuntu.\n\n![running on w10 terminal](https://res.cloudinary.com/hendrasadewa/image/upload/v1591357236/running_on_wsl_gyp9lv.png)\n\n## Setup Front-End (React / Node) Development Environment\n\nOkay, lanjut di hal yang cukup menyenangkan, berikut list tools / apps yang gue butuhkan untuk development:\n\n- Node\n- Yarn\n- VSCode\n- Git (Sudah terintall)\n- Curl (Sudah terintall)\n- ZSH\n- oh-my-zsh\n\n### Node & Yarn\n\nMari mulai dari node, disini gue pakai nvm, incase ada kebutuhan untuk gonta-ganti versi node, gue bisa dengan mudah ganti versi dibanding harus install ulang. Cara installnya tinggal copas perintah berikut:\n\n```bash\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n```\n\nlalu ketika selesai, reload shell dengan perintah:\n\n```bash\nsource ~/.profile\n```\n\nlalu check installasi nvm dengan perintah:\n\n```bash\nnvm --version\n```\n\njika sudah terinstall, maka tinggal install node versi terkini dengan perintah\n\n```bash\nnvm install node\n```\n\nlalu gunakan versi node yang terintall tadi dengan perintah\n\n```bash\nnvm use node\n```\n\nOiya, untuk package manager, gue biasa pakai [yarn](https://yarnpkg.com/), cara install nya tinggal running perintah:\n\n```bash\nnpm install -g yarn\n```\n\n### VSCode\n\nJika sudah, mari install vscode, caranya gampang banget tinggal download dari [situs official vscode](https://code.visualstudio.com/), terus pilih download for windows. Tungguin, sampai selesai download lalu install deh (next next next...).\n\nKalo udah install, lanjut config dan install ekstensi vscode berikut:\n\n![extension vscode recc](https://res.cloudinary.com/hendrasadewa/image/upload/v1591358460/ext_vscode_djyt0u.png)\n\nYang perlu banget adalah: `Remote - WSL` nah ini bakalan ngemudahin waktu develop project yang disimpan dalam layer WSL. VS Intellicode juga membantu dalam coding dengan merekomendasikan command / props via AI, coding jadi lebih cepet.\n\nLanjut ke config, tekan `CTRL`+`,` di vscode lalu pilih `open settings (JSON)`, lalu copas code berikut:\n\n```json\n{\n  \"workbench.colorTheme\": \"Night Owl\",\n  \"workbench.iconTheme\": \"material-icon-theme\",\n  \"editor.suggestSelection\": \"first\",\n  \"vsintellicode.modify.editor.suggestSelection\": \"automaticallyOverrodeDefaultValue\",\n  \"workbench.sideBar.location\": \"right\",\n  \"editor.lineHeight\": 26,\n  \"editor.fontSize\": 16,\n  \"editor.tabSize\": 2,\n  \"editor.minimap.enabled\": false,\n  \"git.autofetch\": true,\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  }\n}\n```\n\nUntuk colorTheme dan iconTheme bisa dipilih sesuai selera. Dikarenakan mata gue yang mulai rada burem, gue perlu menyesuaikan font sizes jadi `16` dan line height jadi `26`, dan untuk ukuran Tab gue terbiasa menggunakan `2` spaces, dan gue takeout minimap, karena gue merasa terdistraksi dengan tampilan minimap.\n\n### Zsh + Oh-My-ZSH\n\nUntuk shell pastilah [zsh](https://www.zsh.org/), ekstensinya banyak, dan juga lebih ringan dibanding [fish](https://fishshell.com/). Cara installnya mulai dari install zsh dengan perintah:\n\n```shell\nsudo apt install zsh\n```\n\nkemudian install [Oh-My-ZSH ](https://ohmyz.sh/)dengan perintah\n\n```bash\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\nketika installasi berjalan, akan diminta password untuk mengganti default shell (bash) dengan zsh, silahkan isikan passwordnya.\n\nsetelah installasi selesai, restart windows terminal.\n\n### Config NVM di ZSH\n\nSetelah selesai install zsh, sekarang tinggal config agar nvm dapat running di zsh.\n\nPertama, buka file `~/.zshrc` dengan text editor yang biasa dipakai misal dengan vim:\n\n```bash\nvim ~/.zshrc\n```\n\nkedua copy-paste perintah berikut, letakan di paling bawah dari file:\n\n```sh\n#  NVM\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n\nterakhir save (jika pakai vim bisa pakai `:wq` ) lalu reload ulang shell dengan perintah:\n\n```sh\nsource ~/.zshrc\n```\n\nSelamat nvm sudah dapat dijalankan!🎉\n\n## React development\n\nSemuanya sudah terintall, tinggal kita coba buat project starter react.\n\nBuka terminal, lalu jalankan perintah\n\n```sh\nnpx create-react-app hello-world\n```\n\ntunggu hingga selesai~\n\n![running npx create react app in wsl](https://res.cloudinary.com/hendrasadewa/image/upload/v1591360016/installing_new_react_project_dkql48.png)\n\njika sudah, buka project dengan perintah\n\n```sh\ncode hello-world\n```\n\nVSCode akan menginstall plugin jika pertama kali dibuka melalui wsl, lalu window vscode akan terbuka, jadi sabar ya mungkin agak lama.\n\n![done](https://res.cloudinary.com/hendrasadewa/image/upload/v1591360396/done_uhudnc.png)\n\nketika sudah masuk kedalam folder `hello-world` dengan perinah dibawah ini melalui terminal:\n\n```sh\ncd hello-world\n```\n\nlalu jalankan development server dengan running perintah\n\n```sh\nyarn start\n```\n\n![project started](https://res.cloudinary.com/hendrasadewa/image/upload/v1591360401/yarn_start_kbbpui.png)\n\nCheck browser dengan alamat yang tertera`localhost:3000`. Nanti akan muncul tampilan berikut:\n\n![react running in browser](https://res.cloudinary.com/hendrasadewa/image/upload/v1591360395/running_on_browser_cb5fkz.png)\n\nYeeay, sudah complete, happy hacking folks! 👨‍💻👩‍💻\n"
      }
    ]
  }
]
